diff --git README.rst README.rst
index b35246e034c..8d8a9cd0787 100644
--- README.rst
+++ README.rst
@@ -1,59 +1,15 @@
-`Mesa <https://mesa3d.org>`_ - The 3D Graphics Library
-======================================================
+CHERI Purecap Mesa (without window system support)
 
-
-Source
-------
-
-This repository lives at https://gitlab.freedesktop.org/mesa/mesa.
-Other repositories are likely forks, and code found there is not supported.
-
-
-Build & install
----------------
-
-You can find more information in our documentation (`docs/install.rst
-<https://mesa3d.org/install.html>`_), but the recommended way is to use
-Meson (`docs/meson.rst <https://mesa3d.org/meson.html>`_):
+Build for Morello (Panfrost)
 
 .. code-block:: sh
 
-  $ mkdir build
-  $ cd build
-  $ meson ..
-  $ sudo ninja install
-
-
-Support
--------
-
-Many Mesa devs hang on IRC; if you're not sure which channel is
-appropriate, you should ask your question on `OFTC's #dri-devel
-<irc://irc.oftc.net/dri-devel>`_, someone will redirect you if
-necessary.
-Remember that not everyone is in the same timezone as you, so it might
-take a while before someone qualified sees your question.
-To figure out who you're talking to, or which nick to ping for your
-question, check out `Who's Who on IRC
-<https://dri.freedesktop.org/wiki/WhosWho/>`_.
-
-The next best option is to ask your question in an email to the
-mailing lists: `mesa-dev\@lists.freedesktop.org
-<https://lists.freedesktop.org/mailman/listinfo/mesa-dev>`_
-
-
-Bug reports
------------
-
-If you think something isn't working properly, please file a bug report
-(`docs/bugs.rst <https://mesa3d.org/bugs.html>`_).
-
-
-Contributing
-------------
-
-Contributions are welcome, and step-by-step instructions can be found in our
-documentation (`docs/submittingpatches.rst
-<https://mesa3d.org/submittingpatches.html>`_).
-
-Note that Mesa uses gitlab for patches submission, review and discussions.
+ $ mkdir build
+ $ cd build
+ $ meson .. -Dcpp_rtti=false -Dllvm=disabled -Dgallium-xvmc=enabled -Ddri-drivers= -Dgallium-drivers=panfrost,swrast \
+   -Dvulkan-drivers= -Dplatforms= -Dgallium-xa=disabled -Dgallium-vdpau=disabled -Dgallium-va=disabled -Dgles1=enabled \
+   -Dgles2=enabled -Dglx=disabled -Dosmesa=false -Dtools= -Ddri-drivers= -Dglvnd=false -Dgbm=enabled -Degl=enabled \
+   -Dgallium-nine=false -Dgallium-xa=disabled -Dgallium-va=disabled -Dgallium-omx=disabled -Dgallium-xvmc=disabled \
+   -Dgallium-vdpau=disabled
+ $ ninja
+ $ sudo ninja install
diff --git include/EGL/eglplatform.h include/EGL/eglplatform.h
index 99362a23dee..f9530acc7b1 100644
--- include/EGL/eglplatform.h
+++ include/EGL/eglplatform.h
@@ -110,8 +110,13 @@ typedef intptr_t EGLNativeWindowType;
 #include <X11/Xutil.h>
 
 typedef Display *EGLNativeDisplayType;
+#ifdef __CHERI_PURE_CAPABILITY__
+typedef khronos_uintptr_t EGLNativePixmapType;
+typedef khronos_uintptr_t EGLNativeWindowType;
+#else
 typedef Pixmap   EGLNativePixmapType;
 typedef Window   EGLNativeWindowType;
+#endif
 
 #elif defined(__unix__)
 
diff --git include/drm-uapi/amdgpu_drm.h include/drm-uapi/amdgpu_drm.h
index 7ee65c0b4f7..2a3d4696e7b 100644
--- include/drm-uapi/amdgpu_drm.h
+++ include/drm-uapi/amdgpu_drm.h
@@ -184,7 +184,7 @@ struct drm_amdgpu_bo_list_in {
 	/** Size of each element describing BO */
 	__u32 bo_info_size;
 	/** Pointer to array describing BOs */
-	__u64 bo_info_ptr;
+	drm_uptr_t bo_info_ptr;
 };
 
 struct drm_amdgpu_bo_list_entry {
@@ -336,7 +336,7 @@ union drm_amdgpu_sched {
 #define AMDGPU_GEM_USERPTR_REGISTER	(1 << 3)
 
 struct drm_amdgpu_gem_userptr {
-	__u64		addr;
+	drm_uptr_t 	addr;
 	__u64		size;
 	/* AMDGPU_GEM_USERPTR_* */
 	__u32		flags;
@@ -473,7 +473,7 @@ struct drm_amdgpu_fence {
 
 struct drm_amdgpu_wait_fences_in {
 	/** This points to uint64_t * which points to fences */
-	__u64 fences;
+	drm_uptr_t fences;
 	__u32 fence_count;
 	__u32 wait_all;
 	__u64 timeout_ns;
@@ -499,7 +499,7 @@ struct drm_amdgpu_gem_op {
 	/** AMDGPU_GEM_OP_* */
 	__u32	op;
 	/** Input or return value */
-	__u64	value;
+	drm_uptr_t	value;
 };
 
 #define AMDGPU_VA_OP_MAP			1
@@ -582,7 +582,7 @@ struct drm_amdgpu_gem_va {
 struct drm_amdgpu_cs_chunk {
 	__u32		chunk_id;
 	__u32		length_dw;
-	__u64		chunk_data;
+	drm_uptr_t	chunk_data;
 };
 
 struct drm_amdgpu_cs_in {
@@ -593,7 +593,7 @@ struct drm_amdgpu_cs_in {
 	__u32		num_chunks;
 	__u32		flags;
 	/** this points to __u64 * which point to cs chunks */
-	__u64		chunks;
+	drm_uptr_t	chunks;
 };
 
 struct drm_amdgpu_cs_out {
@@ -880,7 +880,7 @@ struct drm_amdgpu_query_fw {
 /* Input structure for the INFO ioctl */
 struct drm_amdgpu_info {
 	/* Where the return value will be stored */
-	__u64 return_pointer;
+	drm_uptr_t return_pointer;
 	/* The size of the return value. Just like "size" in "snprintf",
 	 * it limits how many bytes the kernel can write. */
 	__u32 return_size;
diff --git include/drm-uapi/drm.h include/drm-uapi/drm.h
index c76325fc3cb..a43ec8d6e22 100644
--- include/drm-uapi/drm.h
+++ include/drm-uapi/drm.h
@@ -40,6 +40,7 @@
 #include <linux/types.h>
 #include <asm/ioctl.h>
 typedef unsigned int drm_handle_t;
+typedef __u64 drm_uptr_t;
 
 #else /* One of the BSDs */
 
@@ -55,6 +56,15 @@ typedef uint32_t __u32;
 typedef int64_t  __s64;
 typedef uint64_t __u64;
 typedef size_t   __kernel_size_t;
+/*
+ * When targeting pure-capability kernels we must pass capabilities, but for
+ * non-purecap we use u64 to avoid the need for 32-bit compat code
+ */
+#ifdef __CHERI_PURE_CAPABILITY__
+typedef uintcap_t drm_uptr_t;
+#else
+typedef uint64_t drm_uptr_t;
+#endif
 typedef unsigned long drm_handle_t;
 
 #endif
@@ -882,7 +892,7 @@ struct drm_syncobj_transfer {
 #define DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT (1 << 1)
 #define DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE (1 << 2) /* wait for time point to become available */
 struct drm_syncobj_wait {
-	__u64 handles;
+	drm_uptr_t handles;
 	/* absolute timeout */
 	__s64 timeout_nsec;
 	__u32 count_handles;
@@ -892,9 +902,9 @@ struct drm_syncobj_wait {
 };
 
 struct drm_syncobj_timeline_wait {
-	__u64 handles;
+	drm_uptr_t handles;
 	/* wait on specific timeline point for every handles*/
-	__u64 points;
+	drm_uptr_t points;
 	/* absolute timeout */
 	__s64 timeout_nsec;
 	__u32 count_handles;
@@ -905,15 +915,15 @@ struct drm_syncobj_timeline_wait {
 
 
 struct drm_syncobj_array {
-	__u64 handles;
+	drm_uptr_t handles;
 	__u32 count_handles;
 	__u32 pad;
 };
 
 #define DRM_SYNCOBJ_QUERY_FLAGS_LAST_SUBMITTED (1 << 0) /* last available point on timeline syncobj */
 struct drm_syncobj_timeline_array {
-	__u64 handles;
-	__u64 points;
+	drm_uptr_t handles;
+	drm_uptr_t points;
 	__u32 count_handles;
 	__u32 flags;
 };
@@ -938,7 +948,7 @@ struct drm_crtc_queue_sequence {
 	__u32 crtc_id;
 	__u32 flags;
 	__u64 sequence;		/* on input, target sequence. on output, actual sequence */
-	__u64 user_data;	/* user data passed to event */
+	drm_uptr_t user_data;	/* user data passed to event */
 };
 
 #if defined(__cplusplus)
@@ -1144,7 +1154,7 @@ struct drm_event {
 
 struct drm_event_vblank {
 	struct drm_event base;
-	__u64 user_data;
+	drm_uptr_t user_data;
 	__u32 tv_sec;
 	__u32 tv_usec;
 	__u32 sequence;
@@ -1156,7 +1166,7 @@ struct drm_event_vblank {
  */
 struct drm_event_crtc_sequence {
 	struct drm_event	base;
-	__u64			user_data;
+	drm_uptr_t			user_data;
 	__s64			time_ns;
 	__u64			sequence;
 };
diff --git include/drm-uapi/drm_mode.h include/drm-uapi/drm_mode.h
index fa953309d9c..bf9144ca670 100644
--- include/drm-uapi/drm_mode.h
+++ include/drm-uapi/drm_mode.h
@@ -260,10 +260,10 @@ struct drm_mode_modeinfo {
 };
 
 struct drm_mode_card_res {
-	__u64 fb_id_ptr;
-	__u64 crtc_id_ptr;
-	__u64 connector_id_ptr;
-	__u64 encoder_id_ptr;
+	drm_uptr_t fb_id_ptr;
+	drm_uptr_t crtc_id_ptr;
+	drm_uptr_t connector_id_ptr;
+	drm_uptr_t encoder_id_ptr;
 	__u32 count_fbs;
 	__u32 count_crtcs;
 	__u32 count_connectors;
@@ -275,7 +275,7 @@ struct drm_mode_card_res {
 };
 
 struct drm_mode_crtc {
-	__u64 set_connectors_ptr;
+	drm_uptr_t set_connectors_ptr;
 	__u32 count_connectors;
 
 	__u32 crtc_id; /**< Id */
@@ -354,11 +354,11 @@ struct drm_mode_get_plane {
 	 * @format_type_ptr: Pointer to ``__u32`` array of formats that are
 	 * supported by the plane. These formats do not require modifiers.
 	 */
-	__u64 format_type_ptr;
+	drm_uptr_t format_type_ptr;
 };
 
 struct drm_mode_get_plane_res {
-	__u64 plane_id_ptr;
+	drm_uptr_t plane_id_ptr;
 	__u32 count_planes;
 };
 
@@ -457,13 +457,13 @@ enum drm_mode_subconnector {
  */
 struct drm_mode_get_connector {
 	/** @encoders_ptr: Pointer to ``__u32`` array of object IDs. */
-	__u64 encoders_ptr;
+	drm_uptr_t encoders_ptr;
 	/** @modes_ptr: Pointer to struct drm_mode_modeinfo array. */
-	__u64 modes_ptr;
+	drm_uptr_t modes_ptr;
 	/** @props_ptr: Pointer to ``__u32`` array of property IDs. */
-	__u64 props_ptr;
+	drm_uptr_t props_ptr;
 	/** @prop_values_ptr: Pointer to ``__u64`` array of property values. */
-	__u64 prop_values_ptr;
+	drm_uptr_t prop_values_ptr;
 
 	/** @count_modes: Number of modes. */
 	__u32 count_modes;
@@ -586,9 +586,9 @@ struct drm_mode_property_enum {
  */
 struct drm_mode_get_property {
 	/** @values_ptr: Pointer to a ``__u64`` array. */
-	__u64 values_ptr;
+	drm_uptr_t values_ptr;
 	/** @enum_blob_ptr: Pointer to a struct drm_mode_property_enum array. */
-	__u64 enum_blob_ptr;
+	drm_uptr_t enum_blob_ptr;
 
 	/**
 	 * @prop_id: Object ID of the property which should be retrieved. Set
@@ -629,8 +629,8 @@ struct drm_mode_connector_set_property {
 #define DRM_MODE_OBJECT_ANY 0
 
 struct drm_mode_obj_get_properties {
-	__u64 props_ptr;
-	__u64 prop_values_ptr;
+	drm_uptr_t props_ptr;
+	drm_uptr_t prop_values_ptr;
 	__u32 count_props;
 	__u32 obj_id;
 	__u32 obj_type;
@@ -646,7 +646,7 @@ struct drm_mode_obj_set_property {
 struct drm_mode_get_blob {
 	__u32 blob_id;
 	__u32 length;
-	__u64 data;
+	drm_uptr_t data;
 };
 
 struct drm_mode_fb_cmd {
@@ -770,7 +770,7 @@ struct drm_mode_fb_dirty_cmd {
 	__u32 flags;
 	__u32 color;
 	__u32 num_clips;
-	__u64 clips_ptr;
+	drm_uptr_t clips_ptr;
 };
 
 struct drm_mode_mode_cmd {
@@ -825,9 +825,9 @@ struct drm_mode_crtc_lut {
 	__u32 gamma_size;
 
 	/* pointers to arrays */
-	__u64 red;
-	__u64 green;
-	__u64 blue;
+	drm_uptr_t red;
+	drm_uptr_t green;
+	drm_uptr_t blue;
 };
 
 struct drm_color_ctm {
@@ -974,7 +974,7 @@ struct drm_mode_crtc_page_flip {
 	__u32 fb_id;
 	__u32 flags;
 	__u32 reserved;
-	__u64 user_data;
+	drm_uptr_t user_data;
 };
 
 /*
@@ -1002,7 +1002,7 @@ struct drm_mode_crtc_page_flip_target {
 	__u32 fb_id;
 	__u32 flags;
 	__u32 sequence;
-	__u64 user_data;
+	drm_uptr_t user_data;
 };
 
 /* create a dumb scanout buffer */
@@ -1049,12 +1049,12 @@ struct drm_mode_destroy_dumb {
 struct drm_mode_atomic {
 	__u32 flags;
 	__u32 count_objs;
-	__u64 objs_ptr;
-	__u64 count_props_ptr;
-	__u64 props_ptr;
-	__u64 prop_values_ptr;
-	__u64 reserved;
-	__u64 user_data;
+	drm_uptr_t objs_ptr;
+	drm_uptr_t count_props_ptr;
+	drm_uptr_t props_ptr;
+	drm_uptr_t prop_values_ptr;
+	drm_uptr_t reserved;
+	drm_uptr_t user_data;
 };
 
 struct drm_format_modifier_blob {
@@ -1115,7 +1115,7 @@ struct drm_format_modifier {
  */
 struct drm_mode_create_blob {
 	/** @data: Pointer to data to copy. */
-	__u64 data;
+	drm_uptr_t data;
 	/** @length: Length of data to copy. */
 	__u32 length;
 	/** @blob_id: Return: new property ID. */
@@ -1149,7 +1149,7 @@ struct drm_mode_destroy_blob {
  */
 struct drm_mode_create_lease {
 	/** @object_ids: Pointer to array of object ids (__u32) */
-	__u64 object_ids;
+	drm_uptr_t object_ids;
 	/** @object_count: Number of object ids */
 	__u32 object_count;
 	/** @flags: flags for new FD (O_CLOEXEC, etc) */
@@ -1185,7 +1185,7 @@ struct drm_mode_list_lessees {
 	 *
 	 * Pointer to __u64 array of lessee ids
 	 */
-	__u64 lessees_ptr;
+	drm_uptr_t lessees_ptr;
 };
 
 /**
@@ -1212,7 +1212,7 @@ struct drm_mode_get_lease {
 	 *
 	 * Pointer to __u32 array of object ids.
 	 */
-	__u64 objects_ptr;
+	drm_uptr_t objects_ptr;
 };
 
 /**
diff --git include/drm-uapi/i915_drm.h include/drm-uapi/i915_drm.h
index 1de0433f9a2..95755457448 100644
--- include/drm-uapi/i915_drm.h
+++ include/drm-uapi/i915_drm.h
@@ -2579,7 +2579,7 @@ struct drm_i915_gem_userptr {
 	 *
 	 * Needs to be aligned to PAGE_SIZE.
 	 */
-	__u64 user_ptr;
+	drm_uptr_t user_ptr;
 
 	/**
 	 * @user_size:
diff --git include/drm-uapi/panfrost_drm.h include/drm-uapi/panfrost_drm.h
index 9f231d40a14..f85f6f4cecd 100644
--- include/drm-uapi/panfrost_drm.h
+++ include/drm-uapi/panfrost_drm.h
@@ -52,7 +52,7 @@ struct drm_panfrost_submit {
 	__u64 jc;
 
 	/** An optional array of sync objects to wait on before starting this job. */
-	__u64 in_syncs;
+	uintptr_t in_syncs;
 
 	/** Number of sync objects to wait on before starting this job. */
 	__u32 in_sync_count;
@@ -61,7 +61,7 @@ struct drm_panfrost_submit {
 	__u32 out_sync;
 
 	/** Pointer to a u32 array of the BOs that are referenced by the job. */
-	__u64 bo_handles;
+	uintptr_t bo_handles;
 
 	/** Number of BO handles passed in (size is that times 4). */
 	__u32 bo_handle_count;
diff --git src/compiler/glsl_types.cpp src/compiler/glsl_types.cpp
index 895a0d4ca3e..ad3c2d763a4 100644
--- src/compiler/glsl_types.cpp
+++ src/compiler/glsl_types.cpp
@@ -1428,12 +1428,12 @@ unsigned
 glsl_type::record_key_hash(const void *a)
 {
    const glsl_type *const key = (glsl_type *) a;
-   uintptr_t hash = key->length;
+   size_t hash = key->length;
    unsigned retval;
 
    for (unsigned i = 0; i < key->length; i++) {
       /* casting pointer to uintptr_t */
-      hash = (hash * 13 ) + (uintptr_t) key->fields.structure[i].type;
+      hash = (hash * 13 ) + (size_t) key->fields.structure[i].type;
    }
 
    if (sizeof(hash) == 8)
diff --git src/compiler/nir/nir_opt_copy_prop_vars.c src/compiler/nir/nir_opt_copy_prop_vars.c
index 9a689d50b85..cf5342bb740 100644
--- src/compiler/nir/nir_opt_copy_prop_vars.c
+++ src/compiler/nir/nir_opt_copy_prop_vars.c
@@ -238,14 +238,14 @@ gather_vars_written(struct copy_prop_var_state *state,
             /* Destination in all of store_deref, copy_deref and the atomics is src[0]. */
             nir_deref_instr *dst = nir_src_as_deref(intrin->src[0]);
 
-            uintptr_t mask = intrin->intrinsic == nir_intrinsic_store_deref ?
+            size_t mask = intrin->intrinsic == nir_intrinsic_store_deref ?
                nir_intrinsic_write_mask(intrin) : (1 << glsl_get_vector_elements(dst->type)) - 1;
 
             struct hash_entry *ht_entry = _mesa_hash_table_search(written->derefs, dst);
             if (ht_entry)
                ht_entry->data = (void *)(mask | (uintptr_t)ht_entry->data);
             else
-               _mesa_hash_table_insert(written->derefs, dst, (void *)mask);
+               _mesa_hash_table_insert(written->derefs, dst, (void *)(uintptr_t)mask);
 
             break;
          }
@@ -296,8 +296,8 @@ gather_vars_written(struct copy_prop_var_state *state,
                _mesa_hash_table_search_pre_hashed(written->derefs, new_entry->hash,
                                                   new_entry->key);
             if (old_entry) {
-               nir_component_mask_t merged = (uintptr_t) new_entry->data |
-                                             (uintptr_t) old_entry->data;
+               nir_component_mask_t merged = (size_t) new_entry->data |
+                                             (size_t) old_entry->data;
                old_entry->data = (void *) ((uintptr_t) merged);
             } else {
                _mesa_hash_table_insert_pre_hashed(written->derefs, new_entry->hash,
diff --git src/compiler/nir/nir_range_analysis.c src/compiler/nir/nir_range_analysis.c
index 06dd3eea55c..1f469d468d7 100644
--- src/compiler/nir/nir_range_analysis.c
+++ src/compiler/nir/nir_range_analysis.c
@@ -53,7 +53,7 @@ pack_data(const struct ssa_result_range r)
 static struct ssa_result_range
 unpack_data(const void *p)
 {
-   const uintptr_t v = (uintptr_t) p;
+   const size_t v = (size_t) p;
 
    return (struct ssa_result_range){
       .range       = v & 0xff,
@@ -66,7 +66,7 @@ unpack_data(const void *p)
 static void *
 pack_key(const struct nir_alu_instr *instr, nir_alu_type type)
 {
-   uintptr_t type_encoding;
+   size_t type_encoding;
    uintptr_t ptr = (uintptr_t) instr;
 
    /* The low 2 bits have to be zero or this whole scheme falls apart. */
diff --git src/egl/main/eglapi.c src/egl/main/eglapi.c
index 041f35aa7b6..09b24768a13 100644
--- src/egl/main/eglapi.c
+++ src/egl/main/eglapi.c
@@ -1111,7 +1111,7 @@ _fixupNativeWindow(_EGLDisplay *disp, void *native_window)
        * `Window*`.  Convert `Window*` to `Window` because that's what
        * dri2_x11_create_window_surface() expects.
        */
-      return (void *)(* (Window*) native_window);
+      return (void *)(uintptr_t)(* (Window*) native_window);
    }
 #endif
 #ifdef HAVE_XCB_PLATFORM
@@ -1175,7 +1175,7 @@ _fixupNativePixmap(_EGLDisplay *disp, void *native_pixmap)
     * dri2_x11_create_pixmap_surface() expects.
     */
    if (disp && disp->Platform == _EGL_PLATFORM_X11 && native_pixmap != NULL)
-      return (void *)(* (Pixmap*) native_pixmap);
+      return (void *)(uintptr_t)(* (Pixmap*) native_pixmap);
 #endif
 #ifdef HAVE_XCB_PLATFORM
    if (disp && disp->Platform == _EGL_PLATFORM_XCB && native_pixmap != NULL) {
diff --git src/gallium/auxiliary/util/u_threaded_context.c src/gallium/auxiliary/util/u_threaded_context.c
index 6b3929d8951..7d97cf4764e 100644
--- src/gallium/auxiliary/util/u_threaded_context.c
+++ src/gallium/auxiliary/util/u_threaded_context.c
@@ -35,6 +35,10 @@
 #include "util/perf/cpu_trace.h"
 #include "compiler/shader_info.h"
 
+#ifndef MAX
+#define MAX(a, b) ((a > b) ? (a) : (b))
+#endif
+
 #if TC_DEBUG >= 1
 #define tc_assert assert
 #else
@@ -3530,10 +3534,11 @@ is_next_call_a_mergeable_draw(struct tc_draw_single *first,
    if (next->base.call_id != TC_CALL_draw_single)
       return false;
 
-   STATIC_ASSERT(offsetof(struct pipe_draw_info, min_index) ==
-                 sizeof(struct pipe_draw_info) - 8);
-   STATIC_ASSERT(offsetof(struct pipe_draw_info, max_index) ==
-                 sizeof(struct pipe_draw_info) - 4);
+#define DRAW_INFO_SIZE_PADDING MAX(0, sizeof(void*) - 2 * sizeof(int))
+    STATIC_ASSERT(offsetof(struct pipe_draw_info, min_index) ==
+                      sizeof(struct pipe_draw_info) - DRAW_INFO_SIZE_PADDING - 8);
+    STATIC_ASSERT(offsetof(struct pipe_draw_info, max_index) ==
+                      sizeof(struct pipe_draw_info) - DRAW_INFO_SIZE_PADDING - 4);
    /* All fields must be the same except start and count. */
    /* u_threaded_context stores start/count in min/max_index for single draws. */
    return memcmp((uint32_t*)&first->info, (uint32_t*)&next->info,
@@ -5047,4 +5052,4 @@ threaded_context_get_renderpass_info(struct threaded_context *tc, bool wait)
    if (tc->renderpass_info && wait)
       util_queue_fence_wait(&tc->renderpass_info->ready);
    return tc->renderpass_info;
-}
\ No newline at end of file
+}
diff --git src/gallium/drivers/panfrost/pan_job.c src/gallium/drivers/panfrost/pan_job.c
index c864ba5b7c8..4e87d2053d8 100644
--- src/gallium/drivers/panfrost/pan_job.c
+++ src/gallium/drivers/panfrost/pan_job.c
@@ -661,7 +661,7 @@ panfrost_batch_submit_ioctl(struct panfrost_batch *batch,
         submit.jc = first_job_desc;
         submit.requirements = reqs;
         if (in_sync) {
-                submit.in_syncs = (u64)(uintptr_t)(&in_sync);
+                submit.in_syncs = (uintptr_t)(&in_sync);
                 submit.in_sync_count = 1;
         }
 
@@ -708,7 +708,7 @@ panfrost_batch_submit_ioctl(struct panfrost_batch *batch,
         /* Always used on Bifrost, occassionally used on Midgard */
         bo_handles[submit.bo_handle_count++] = dev->sample_positions->gem_handle;
 
-        submit.bo_handles = (u64) (uintptr_t) bo_handles;
+        submit.bo_handles = (uintptr_t) bo_handles;
         if (ctx->is_noop)
                 ret = 0;
         else
diff --git src/mesa/main/bufferobj.c src/mesa/main/bufferobj.c
index 5ff1ad21bd1..9866fefc8a4 100644
--- src/mesa/main/bufferobj.c
+++ src/mesa/main/bufferobj.c
@@ -468,7 +468,7 @@ _mesa_access_flags_to_transfer_flags(GLbitfield access, bool wholeBuffer)
  */
 void *
 _mesa_bufferobj_map_range(struct gl_context *ctx,
-                           GLintptr offset, GLsizeiptr length, GLbitfield access,
+                           GLsizeiptr offset, GLsizeiptr length, GLbitfield access,
                            struct gl_buffer_object *obj,
                            gl_map_buffer_index index)
 {
@@ -516,7 +516,7 @@ _mesa_bufferobj_map_range(struct gl_context *ctx,
 
 void
 _mesa_bufferobj_flush_mapped_range(struct gl_context *ctx,
-                                   GLintptr offset, GLsizeiptr length,
+                                   GLsizeiptr offset, GLsizeiptr length,
                                    struct gl_buffer_object *obj,
                                    gl_map_buffer_index index)
 {
diff --git src/mesa/main/bufferobj.h src/mesa/main/bufferobj.h
index 19b5367536c..4d34a9d0667 100644
--- src/mesa/main/bufferobj.h
+++ src/mesa/main/bufferobj.h
@@ -86,13 +86,13 @@ _mesa_bufferobj_get_subdata(struct gl_context *ctx,
                             void *data, struct gl_buffer_object *obj);
 
 void *_mesa_bufferobj_map_range(struct gl_context *ctx,
-                                GLintptr offset, GLsizeiptr length,
+                                GLsizeiptr offset, GLsizeiptr length,
                                 GLbitfield access,
                                 struct gl_buffer_object *obj,
                                 gl_map_buffer_index index);
 
 void _mesa_bufferobj_flush_mapped_range(struct gl_context *ctx,
-                                        GLintptr offset, GLsizeiptr length,
+                                        GLsizeiptr offset, GLsizeiptr length,
                                         struct gl_buffer_object *obj,
                                         gl_map_buffer_index index);
 GLboolean _mesa_bufferobj_unmap(struct gl_context *ctx, struct gl_buffer_object *obj,
diff --git src/mesa/main/dlist.c src/mesa/main/dlist.c
index 148e3b6368c..2eecb624712 100644
--- src/mesa/main/dlist.c
+++ src/mesa/main/dlist.c
@@ -646,7 +646,11 @@ union pointer
 static inline void
 save_pointer(Node *dest, void *src)
 {
-   union pointer p;
+#ifdef __CHERI_PURE_CAPABILITY__
+    /* Hopefully dest is aligned to pointer alignment */
+    *(void**)dest = src;
+#else
+    union pointer p;
    unsigned i;
 
    STATIC_ASSERT(POINTER_DWORDS == 1 || POINTER_DWORDS == 2);
@@ -656,6 +660,7 @@ save_pointer(Node *dest, void *src)
 
    for (i = 0; i < POINTER_DWORDS; i++)
       dest[i].ui = p.dwords[i];
+#endif
 }
 
 
@@ -665,6 +670,10 @@ save_pointer(Node *dest, void *src)
 static inline void *
 get_pointer(const Node *node)
 {
+#ifdef __CHERI_PURE_CAPABILITY__
+    /* Hopefully node is aligned to pointer alignment */
+    return *(void**)node;
+#else
    union pointer p;
    unsigned i;
 
@@ -672,6 +681,7 @@ get_pointer(const Node *node)
       p.dwords[i] = node[i].ui;
 
    return p.ptr;
+#endif
 }
 
 
@@ -1199,25 +1209,37 @@ memdup(const void *src, GLsizei bytes)
  * Allocate space for a display list instruction (opcode + payload space).
  * \param opcode  the instruction opcode (OPCODE_* value)
  * \param bytes   instruction payload size (not counting opcode)
- * \param align8  does the payload need to be 8-byte aligned?
- *                This is only relevant in 64-bit environments.
+ * \param align   does the payload need to be pointer aligned?
+ *                This is only relevant in 64-bit and CHERI environments.
  * \return pointer to allocated memory (the payload will be at pointer+1)
  */
 static Node *
-dlist_alloc(struct gl_context *ctx, OpCode opcode, GLuint bytes, bool align8)
+dlist_alloc(struct gl_context *ctx, OpCode opcode, GLuint bytes, bool align)
 {
    const GLuint numNodes = 1 + (bytes + sizeof(Node) - 1) / sizeof(Node);
    const GLuint contNodes = 1 + POINTER_DWORDS;  /* size of continue info */
+   GLuint ii, numNopNodes;
 
    assert(bytes <= BLOCK_SIZE * sizeof(Node));
 
-   /* If this node needs to start on an 8-byte boundary, pad the last node. */
-   if (sizeof(void *) == 8 && align8 &&
-       ctx->ListState.CurrentPos % 2 == 1) {
+   if (align &&
+       (sizeof(void *) == 16 || sizeof(void *) == 8)) {
+      numNopNodes = ctx->ListState.CurrentPos % (sizeof(void *) / 4);
+      if (numNopNodes != 0) {
+         numNopNodes = (sizeof(void *) / 4) - numNopNodes;
+      }
+   } else {
+      numNopNodes = 0;
+   }
+
+   /* If this node needs to start on a pointer boundary, pad the last nodes. */
+   if (numNopNodes != 0) {
       Node *last = ctx->ListState.CurrentBlock + ctx->ListState.CurrentPos -
                    ctx->ListState.LastInstSize;
-      last->InstSize++;
-      ctx->ListState.CurrentPos++;
+      for (ii = 0; ii < numNopNodes; ii++) {
+         last->InstSize++;
+         ctx->ListState.CurrentPos++;
+      }
    }
 
    if (ctx->ListState.CurrentPos + numNodes + contNodes > BLOCK_SIZE) {
@@ -1231,7 +1253,7 @@ dlist_alloc(struct gl_context *ctx, OpCode opcode, GLuint bytes, bool align8)
          return NULL;
       }
 
-      /* a fresh block should be 8-byte aligned on 64-bit systems */
+      /* a fresh block should be aligned to a pointer size */
       assert(((GLintptr) newblock) % sizeof(void *) == 0);
 
       save_pointer(&n[1], newblock);
diff --git src/mesa/main/image.c src/mesa/main/image.c
index 09025327cf3..7a9e23acac2 100644
--- src/mesa/main/image.c
+++ src/mesa/main/image.c
@@ -151,8 +151,8 @@ _mesa_image_offset( GLuint dimensions,
 
    if (type == GL_BITMAP) {
       /* BITMAP data */
-      GLintptr bytes_per_row;
-      GLintptr bytes_per_image;
+      GLsizeiptr bytes_per_row;
+      GLsizeiptr bytes_per_image;
       /* components per pixel for color or stencil index: */
       const GLint comp_per_pixel = 1;
 
@@ -170,8 +170,8 @@ _mesa_image_offset( GLuint dimensions,
    }
    else {
       /* Non-BITMAP data */
-      GLintptr bytes_per_pixel, bytes_per_row, remainder, bytes_per_image;
-      GLintptr topOfImage;
+      GLsizeiptr bytes_per_pixel, bytes_per_row, remainder, bytes_per_image;
+      GLsizeiptr topOfImage;
 
       bytes_per_pixel = _mesa_bytes_per_pixel( format, type );
 
diff --git src/util/hash_table.c src/util/hash_table.c
index dc00b2de8e9..613621c7701 100644
--- src/util/hash_table.c
+++ src/util/hash_table.c
@@ -678,7 +678,7 @@ _mesa_hash_string_with_length(const void *_key, unsigned length)
 uint32_t
 _mesa_hash_pointer(const void *pointer)
 {
-   uintptr_t num = (uintptr_t) pointer;
+   size_t num = (size_t) (uintptr_t) pointer;
    return (uint32_t) ((num >> 2) ^ (num >> 6) ^ (num >> 10) ^ (num >> 14));
 }
 
diff --git src/util/ralloc.c src/util/ralloc.c
index 2a0c26db19f..d73c17bb02e 100644
--- src/util/ralloc.c
+++ src/util/ralloc.c
@@ -37,7 +37,7 @@
 
 #define CANARY 0x5A1106
 
-#if defined(__LP64__) || defined(_WIN64)
+#if defined(__LP64__) || defined(_WIN64) || defined(__CHERI_PURE_CAPABILITY__)
 #define HEADER_ALIGN alignas(16)
 #else
 #define HEADER_ALIGN alignas(8)
@@ -553,10 +553,13 @@ ralloc_vasprintf_rewrite_tail(char **str, size_t *start, const char *fmt,
 enum gc_flags {
    IS_USED = (1 << 0),
    CURRENT_GENERATION = (1 << 1),
+   IS_PADDING = (1 << 7),
 };
 
 typedef struct
 {
+   HEADER_ALIGN
+
 #ifndef NDEBUG
    /* A canary value used to determine whether a pointer is allocated using gc_alloc. */
    unsigned canary;
@@ -565,6 +568,12 @@ typedef struct
    uint16_t slab_offset;
    uint8_t bucket;
    uint8_t flags;
+
+   /* The last padding byte must have IS_PADDING set and is used to store the amount of padding. If
+    * there is no padding, the IS_PADDING bit of "flags" is unset and "flags" is checked instead.
+    * Because of this, "flags" must be the last member of this struct.
+    */
+   uint8_t padding[];
 } gc_block_header;
 
 /* This structure is at the start of the slab. Objects inside a slab are
@@ -618,8 +627,17 @@ struct gc_ctx {
 static gc_block_header *
 get_gc_header(const void *ptr)
 {
-   gc_block_header *info = (gc_block_header *) (((char *) ptr) -
-					    sizeof(gc_block_header));
+   uint8_t *c_ptr = (uint8_t *)ptr;
+
+   /* Adjust for padding added to ensure alignment of the allocation. There might also be padding
+    * added by the compiler into gc_block_header, but that isn't counted in the IS_PADDING byte.
+    */
+   if (c_ptr[-1] & IS_PADDING)
+      c_ptr -= c_ptr[-1] & ~IS_PADDING;
+
+   c_ptr -= sizeof(gc_block_header);
+
+   gc_block_header *info = (gc_block_header *)c_ptr;
    assert(info->canary == GC_CANARY);
    return info;
 }
@@ -656,28 +674,32 @@ gc_context(const void *parent)
    return ctx;
 }
 
-static size_t
-gc_bucket_obj_size(unsigned bucket)
+static_assert(UINT32_MAX >= MAX_FREELIST_SIZE, "Freelist sizes use uint32_t");
+
+static uint32_t
+gc_bucket_obj_size(uint32_t bucket)
 {
    return (bucket + 1) * FREELIST_ALIGNMENT;
 }
 
-static unsigned
-gc_bucket_for_size(size_t size)
+static uint32_t
+gc_bucket_for_size(uint32_t size)
 {
    return (size - 1) / FREELIST_ALIGNMENT;
 }
 
-static unsigned
-gc_bucket_num_objs(unsigned bucket)
+static_assert(UINT32_MAX >= SLAB_SIZE, "SLAB_SIZE use uint32_t");
+
+static uint32_t
+gc_bucket_num_objs(uint32_t bucket)
 {
    return (SLAB_SIZE - sizeof(gc_slab)) / gc_bucket_obj_size(bucket);
 }
 
 static gc_block_header *
-alloc_from_slab(gc_slab *slab, unsigned bucket)
+alloc_from_slab(gc_slab *slab, uint32_t bucket)
 {
-   size_t size = gc_bucket_obj_size(bucket);
+   uint32_t size = gc_bucket_obj_size(bucket);
    gc_block_header *header;
    if (slab->freelist) {
       /* Prioritize already-allocated chunks, since they probably have a page
@@ -742,15 +764,15 @@ free_from_slab(gc_block_header *header, bool keep_empty_slabs)
    slab->num_free++;
 }
 
-static unsigned
-get_slab_size(unsigned bucket)
+static uint32_t
+get_slab_size(uint32_t bucket)
 {
    /* SLAB_SIZE rounded down to a multiple of the object size so that it's not larger than what can
     * be used.
     */
-   unsigned obj_size = gc_bucket_obj_size(bucket);
-   unsigned num_objs = gc_bucket_num_objs(bucket);
-   return align64(sizeof(gc_slab) + num_objs * obj_size, alignof(gc_slab));
+   uint32_t obj_size = gc_bucket_obj_size(bucket);
+   uint32_t num_objs = gc_bucket_num_objs(bucket);
+   return align((uint32_t)sizeof(gc_slab) + num_objs * obj_size, alignof(gc_slab));
 }
 
 static gc_slab *
@@ -780,12 +802,18 @@ gc_alloc_size(gc_ctx *ctx, size_t size, size_t align)
 
    align = MAX2(align, alignof(gc_block_header));
 
+   /* Alignment will add at most align-alignof(gc_block_header) bytes of padding to the header, and
+    * the IS_PADDING byte can only encode up to 127.
+    */
+   assert((align - alignof(gc_block_header)) <= 127);
+
+   size_t header_size = align64(sizeof(gc_block_header), align);
    size = align64(size, align);
-   size += align64(sizeof(gc_block_header), align);
+   size += header_size;
 
    gc_block_header *header = NULL;
    if (size <= MAX_FREELIST_SIZE) {
-      unsigned bucket = gc_bucket_for_size(size);
+      uint32_t bucket = gc_bucket_for_size((uint32_t)size);
       if (list_is_empty(&ctx->slabs[bucket].free_slabs) && !create_slab(ctx, bucket))
          return NULL;
       gc_slab *slab = list_first_entry(&ctx->slabs[bucket].free_slabs, gc_slab, free_link);
@@ -803,7 +831,10 @@ gc_alloc_size(gc_ctx *ctx, size_t size, size_t align)
    header->canary = GC_CANARY;
 #endif
 
-   void *ptr = (char *)header + sizeof(gc_block_header);
+   uint8_t *ptr = (uint8_t *)header + header_size;
+   if ((header_size - 1) != offsetof(gc_block_header, flags))
+      ptr[-1] = IS_PADDING | (header_size - sizeof(gc_block_header));
+
    assert(((uintptr_t)ptr & (align - 1)) == 0);
    return ptr;
 }
@@ -924,7 +955,11 @@ gc_sweep_end(gc_ctx *ctx)
  */
 
 #define MIN_LINEAR_BUFSIZE 2048
+#ifdef __CHERI_PURE_CAPABILITY__
+#define SUBALLOC_ALIGNMENT 16
+#else
 #define SUBALLOC_ALIGNMENT 8
+#endif
 #define LMAGIC 0x87b9c7d3
 
 struct linear_header {
@@ -957,6 +992,8 @@ struct linear_header {
 struct linear_size_chunk {
    unsigned size; /* for realloc */
    unsigned _padding;
+   unsigned _padding1;
+   unsigned _padding2;
 };
 
 typedef struct linear_header linear_header;
diff --git src/util/rb_tree.c src/util/rb_tree.c
index a86fa31a809..12509ecfa50 100644
--- src/util/rb_tree.c
+++ src/util/rb_tree.c
@@ -67,13 +67,13 @@ rb_node_set_red(struct rb_node *n)
 static void
 rb_node_copy_color(struct rb_node *dst, struct rb_node *src)
 {
-    dst->parent = (dst->parent & ~1ull) | (src->parent & 1);
+    dst->parent = (dst->parent & ~1ull) | (size_t)(src->parent & 1);
 }
 
 static void
 rb_node_set_parent(struct rb_node *n, struct rb_node *p)
 {
-    n->parent = (n->parent & 1) | (uintptr_t)p;
+    n->parent = (size_t)(n->parent & 1) | (uintptr_t)p;
 }
 
 static struct rb_node *
diff --git src/util/sparse_array.c src/util/sparse_array.c
index 38b0431461b..92a2035a91d 100644
--- src/util/sparse_array.c
+++ src/util/sparse_array.c
@@ -45,8 +45,8 @@ util_sparse_array_init(struct util_sparse_array *arr,
    assert(node_size >= 2 && node_size == (1ull << arr->node_size_log2));
 }
 
-#define NODE_PTR_MASK (~((uintptr_t)NODE_ALLOC_ALIGN - 1))
-#define NODE_LEVEL_MASK ((uintptr_t)NODE_ALLOC_ALIGN - 1)
+#define NODE_PTR_MASK (~((size_t)NODE_ALLOC_ALIGN - 1))
+#define NODE_LEVEL_MASK ((size_t)NODE_ALLOC_ALIGN - 1)
 #define NULL_NODE 0
 
 static inline uintptr_t
diff --git src/util/u_pointer.h src/util/u_pointer.h
index e106eb2b814..2822190e669 100644
--- src/util/u_pointer.h
+++ src/util/u_pointer.h
@@ -82,10 +82,14 @@ uintptr_to_pointer( uintptr_t u )
  * Return a pointer aligned to next multiple of N bytes.
  */
 static inline void *
-align_pointer( const void *unaligned, uintptr_t alignment )
+align_pointer( void *unaligned, uintptr_t alignment )
 {
+#if defined(__has_builtin) && __has_builtin(__builtin_align_up)
+    return __builtin_align_up(unaligned, alignment);
+#else
    uintptr_t aligned = (pointer_to_uintptr( unaligned ) + alignment - 1) & ~(alignment - 1);
    return uintptr_to_pointer( aligned );
+#endif
 }
 
 
