diff --git src/client/qwaylanddisplay.cpp src/client/qwaylanddisplay.cpp
index c01e238b..daf35119 100644
--- src/client/qwaylanddisplay.cpp
+++ src/client/qwaylanddisplay.cpp
@@ -377,11 +377,12 @@ QWaylandDisplay::~QWaylandDisplay(void)
 #if QT_CONFIG(cursor)
     qDeleteAll(mCursorThemes);
 #endif
-    if (mDisplay)
-        wl_display_disconnect(mDisplay);
 
     if (m_frameEventQueue)
         wl_event_queue_destroy(m_frameEventQueue);
+
+    if (mDisplay)
+        wl_display_disconnect(mDisplay);
 }
 
 // Steps which is called just after constructor. This separates registry_global() out of the constructor
diff --git src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglwindow.cpp src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglwindow.cpp
index a7377830..732b3cd6 100644
--- src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglwindow.cpp
+++ src/hardwareintegration/client/xcomposite-egl/qwaylandxcompositeeglwindow.cpp
@@ -118,7 +118,7 @@ void QWaylandXCompositeEGLWindow::createEglSurface()
     XCompositeRedirectWindow(m_glxIntegration->xDisplay(), m_xWindow, CompositeRedirectManual);
     XMapWindow(m_glxIntegration->xDisplay(), m_xWindow);
 
-    m_surface = eglCreateWindowSurface(m_glxIntegration->eglDisplay(), m_config, reinterpret_cast<EGLNativeWindowType>(m_xWindow), nullptr);
+    m_surface = eglCreateWindowSurface(m_glxIntegration->eglDisplay(), m_config, reinterpret_cast<EGLNativeWindowType>((uintptr_t)m_xWindow), nullptr);
     if (m_surface == EGL_NO_SURFACE) {
         qFatal("Could not make eglsurface");
     }
diff --git src/hardwareintegration/compositor/dmabuf-server/dmabufserverbufferintegration.cpp src/hardwareintegration/compositor/dmabuf-server/dmabufserverbufferintegration.cpp
index 133e1eca..f859b29a 100644
--- src/hardwareintegration/compositor/dmabuf-server/dmabufserverbufferintegration.cpp
+++ src/hardwareintegration/compositor/dmabuf-server/dmabufserverbufferintegration.cpp
@@ -47,7 +47,7 @@ DmaBufServerBuffer::DmaBufServerBuffer(DmaBufServerBufferIntegration *integratio
 
     m_texture = new QOpenGLTexture(qimage);
 
-    m_image  = m_integration->eglCreateImageKHR(eglContext, EGL_GL_TEXTURE_2D_KHR, (EGLClientBuffer)(unsigned long)m_texture->textureId(), nullptr);
+    m_image  = m_integration->eglCreateImageKHR(eglContext, EGL_GL_TEXTURE_2D_KHR, (EGLClientBuffer)(uintptr_t)m_texture->textureId(), nullptr);
 
     qCDebug(qLcWaylandCompositorHardwareIntegration) << "DmaBufServerBuffer created egl image" << m_image;
 
diff --git src/hardwareintegration/compositor/xcomposite-egl/xcompositeeglintegration.cpp src/hardwareintegration/compositor/xcomposite-egl/xcompositeeglintegration.cpp
index 3cf51a8d..856eecee 100644
--- src/hardwareintegration/compositor/xcomposite-egl/xcompositeeglintegration.cpp
+++ src/hardwareintegration/compositor/xcomposite-egl/xcompositeeglintegration.cpp
@@ -116,7 +116,7 @@ QOpenGLTexture *XCompositeEglClientBuffer::toOpenGlTexture(int plane)
     attribList.append(EGL_TEXTURE_2D);
     attribList.append(EGL_NONE);
 
-    EGLSurface surface = eglCreatePixmapSurface(m_integration->eglDisplay(), config, reinterpret_cast<EGLNativePixmapType>(pixmap), attribList.constData());
+    EGLSurface surface = eglCreatePixmapSurface(m_integration->eglDisplay(), config, reinterpret_cast<EGLNativePixmapType>((uintptr_t)pixmap), attribList.constData());
     if (surface == EGL_NO_SURFACE) {
         qDebug() << "Failed to create eglsurface" << pixmap << compositorBuffer->window();
     }
