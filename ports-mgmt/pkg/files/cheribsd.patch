diff --git external/libucl/uthash/uthash.h external/libucl/uthash/uthash.h
index 9ed8bea4d..4384ef6b1 100644
--- external/libucl/uthash/uthash.h
+++ external/libucl/uthash/uthash.h
@@ -227,17 +227,17 @@ do {
         _hd_hh_del = &((delptr)->hh);                                            \
         if ((delptr) == ELMT_FROM_HH((head)->hh.tbl,(head)->hh.tbl->tail)) {     \
             (head)->hh.tbl->tail =                                               \
-                (UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +               \
+                (UT_hash_handle*)((uintptr_t)((delptr)->hh.prev) +               \
                 (head)->hh.tbl->hho);                                            \
         }                                                                        \
         if ((delptr)->hh.prev) {                                                 \
-            ((UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +                  \
+            ((UT_hash_handle*)((uintptr_t)((delptr)->hh.prev) +                  \
                     (head)->hh.tbl->hho))->next = (delptr)->hh.next;             \
         } else {                                                                 \
             DECLTYPE_ASSIGN(head,(delptr)->hh.next);                             \
         }                                                                        \
         if (_hd_hh_del->next) {                                                  \
-            ((UT_hash_handle*)((ptrdiff_t)_hd_hh_del->next +                     \
+            ((UT_hash_handle*)((uintptr_t)_hd_hh_del->next +                     \
                     (head)->hh.tbl->hho))->prev =                                \
                     _hd_hh_del->prev;                                            \
         }                                                                        \
diff --git external/picosat/picosat.c external/picosat/picosat.c
index a007afc9b..88f9c099d 100644
--- external/picosat/picosat.c
+++ external/picosat/picosat.c
@@ -145,7 +145,7 @@ IN THE SOFTWARE.
 typedef uintptr_t Wrd;
 #define ISLITREASON(C) (1&(Wrd)C)
 #define LIT2REASON(L) \
-  (assert (L->val==TRUE), ((Cls*)(1 + (2*(L - ps->lits)))))
+  (assert (L->val==TRUE), ((Cls*)(Wrd)(1 + (2*(L - ps->lits)))))
 #define REASON2LIT(C) ((Lit*)(ps->lits + ((Wrd)C)/2))
 #endif
 
@@ -184,10 +184,11 @@ typedef uintptr_t Wrd;
 #define RNK2VAR(r) (ps->vars + ((r) - ps->rnks))
 
 #define BLK_FILL_BYTES 8
+#define BLK_OFFSET_BYTES (offsetof(Blk, data))
 #define SIZE_OF_BLK (sizeof (Blk) - BLK_FILL_BYTES)
 
 #define PTR2BLK(void_ptr) \
-  ((void_ptr) ? (Blk*)(((char*)(void_ptr)) - SIZE_OF_BLK) : 0)
+  ((void_ptr) ? (Blk*)(((char*)(void_ptr)) - BLK_OFFSET_BYTES) : 0)
 
 #define AVERAGE(a,b) ((b) ? (((double)a) / (double)(b)) : 0.0)
 #define PERCENT(a,b) (100.0 * AVERAGE(a,b))
diff --git external/sqlite/sqlite3.c external/sqlite/sqlite3.c
index dd3b5c575..ba06efaae 100644
--- external/sqlite/sqlite3.c
+++ external/sqlite/sqlite3.c
@@ -458,7 +458,7 @@ extern "C" {
 */
 #define SQLITE_VERSION        "3.42.0"
 #define SQLITE_VERSION_NUMBER 3042000
-#define SQLITE_SOURCE_ID      "2023-05-16 12:36:15 831d0fb2836b71c9bc51067c49fee4b8f18047814f2ff22d817d25195cf350b0"
+#define SQLITE_SOURCE_ID      " a7ffc6f8bf1ed76651c14756a061d662f580ff4de43b49fa82d80a4b80f8434a"
 
 /*
 ** CAPI3REF: Run-Time Library Version Numbers
@@ -14303,6 +14303,9 @@ SQLITE_PRIVATE void sqlite3HashClear(Hash*);
 ** hack only.
 */
 #ifdef SQLITE_INLINE_MEMCPY
+#ifdef __CHERI_PURE_CAPABILITY__
+#error SQLITE_INLINE_MEMCPY is not allowed when compiling for CheriABI.
+#endif
 # define memcpy(D,S,N) {char*xxd=(char*)(D);const char*xxs=(const char*)(S);\
                         int xxn=(N);while(xxn-->0)*(xxd++)=*(xxs++);}
 #endif
@@ -14626,6 +14629,14 @@ typedef INT16_TYPE LogEst;
 #define LARGEST_UINT64 (0xffffffff|(((u64)0xffffffff)<<32))
 #define SMALLEST_INT64 (((i64)-1) - LARGEST_INT64)
 
+
+#define REQUIRE_CHERI_ALIGNMENT
+#ifdef REQUIRE_CHERI_ALIGNMENT
+# define SQLITE_DEFAULT_ALIGNMENT (sizeof(void*) < 16 ? 16 : sizeof(void*))
+#else
+# define SQLITE_DEFAULT_ALIGNMENT (sizeof(void*) < 8 ? 8 : sizeof(void*))
+#endif
+
 /*
 ** Round up a number to the next larger multiple of 8.  This is used
 ** to force 8-byte alignment on 64-bit architectures.
@@ -14635,18 +14646,39 @@ typedef INT16_TYPE LogEst;
 ** ROUND8P() assumes that the argument is already an integer number of
 ** pointers in size, and so it is a no-op on systems where the pointer
 ** size is 8.
+**
+** XXXAR: For CHERI, we change these macros to ensure 16-byte alignement since
+** renaming them would cause too many conflicts
 */
-#define ROUND8(x)     (((x)+7)&~7)
+#if __has_builtin(__builtin_align_up)
+# define ROUND(x, a) __builtin_align_up(x, a)
+#else
+# define ROUND(x, a)     (((x)+(a-1))&~(a-1))
+#endif
+/* XXX: not actually 8 for CHERI */
+#define ROUND8(x) ROUND(x, SQLITE_DEFAULT_ALIGNMENT)
 #if SQLITE_PTRSIZE==8
 # define ROUND8P(x)   (x)
 #else
-# define ROUND8P(x)   (((x)+7)&~7)
+# define ROUND8P(x)   ROUND8(x)
 #endif
 
 /*
 ** Round down to the nearest multiple of 8
 */
-#define ROUNDDOWN8(x) ((x)&~7)
+#if __has_builtin(__builtin_align_down)
+# define ROUNDDOWN(x, a) __builtin_align_down(x, 8)
+#else
+# define ROUNDDOWN(x, a) ((x)&~(a-1))
+#endif
+/* XXX: not actually 8 for CHERI */
+#define ROUNDDOWN8(x) ROUNDDOWN(x, SQLITE_DEFAULT_ALIGNMENT)
+
+#if __has_builtin(__builtin_is_aligned)
+# define ALIGNED_TO(X, A) __builtin_is_aligned(X, A)
+#else
+# define ALIGNED_TO(X, A) ((((char*)(X) - (char*)0)&((A)-1))==0)
+#endif
 
 /*
 ** Assert that the pointer X is aligned to an 8-byte boundary.  This
@@ -14656,12 +14688,17 @@ typedef INT16_TYPE LogEst;
 ** Except, if SQLITE_4_BYTE_ALIGNED_MALLOC is defined, then the
 ** underlying malloc() implementation might return us 4-byte aligned
 ** pointers.  In that case, only verify 4-byte alignment.
+**
+** For CHERI support we want 16-byte alignment. We also do this for native to
+** make debugging easier. The macro name is a lie anyway so I don't see why we
+** should't lie just a little bit more.
 */
 #ifdef SQLITE_4_BYTE_ALIGNED_MALLOC
-# define EIGHT_BYTE_ALIGNMENT(X)   ((((uptr)(X) - (uptr)0)&3)==0)
+# define SQLITE_MALLOC_ALIGNMENT 4
 #else
-# define EIGHT_BYTE_ALIGNMENT(X)   ((((uptr)(X) - (uptr)0)&7)==0)
+# define SQLITE_MALLOC_ALIGNMENT SQLITE_DEFAULT_ALIGNMENT
 #endif
+#define EIGHT_BYTE_ALIGNMENT(X) ALIGNED_TO(X, SQLITE_MALLOC_ALIGNMENT)
 
 /*
 ** Disable MMAP on platforms where it is known to not work
@@ -19436,7 +19473,7 @@ struct Parse {
 #define PARSE_HDR_SZ (offsetof(Parse,aTempReg)-offsetof(Parse,zErrMsg)) /* Recursive part w/o aColCache*/
 #define PARSE_RECURSE_SZ offsetof(Parse,sLastToken)    /* Recursive part */
 #define PARSE_TAIL_SZ (sizeof(Parse)-PARSE_RECURSE_SZ) /* Non-recursive part */
-#define PARSE_TAIL(X) (((char*)(X))+PARSE_RECURSE_SZ)  /* Pointer to tail */
+#define PARSE_TAIL(X) (&(X)->sLastToken)  /* Pointer to tail */
 
 /*
 ** Return true if currently inside an sqlite3_declare_vtab() call.
@@ -22734,6 +22771,7 @@ struct sqlite3_value {
     int nZero;          /* Extra zero bytes when MEM_Zero and MEM_Blob set */
     const char *zPType; /* Pointer type when MEM_Term|MEM_Subtype|MEM_Null */
     FuncDef *pDef;      /* Used only when flags==MEM_Agg */
+    _Alignas(SQLITE_DEFAULT_ALIGNMENT) char ensureAlignment;
   } u;
   char *z;            /* String or BLOB value */
   int n;              /* Number of characters in string value, excluding '\0' */
@@ -25754,6 +25792,8 @@ static malloc_zone_t* _sqliteZone_;
 
 #endif /* __APPLE__ or not __APPLE__ */
 
+_Static_assert(SQLITE_DEFAULT_ALIGNMENT % sizeof(int64_t) == 0, "");
+
 /*
 ** Like malloc(), but remember the size of the allocation
 ** so that we can find it later using sqlite3MemSize().
@@ -25776,8 +25816,9 @@ static void *sqlite3MemMalloc(int nByte){
   sqlite3_int64 *p;
   assert( nByte>0 );
   testcase( ROUND8(nByte)!=nByte );
-  p = SQLITE_MALLOC( nByte+8 );
+  p = SQLITE_MALLOC( nByte+SQLITE_DEFAULT_ALIGNMENT );
   if( p ){
+    p += (SQLITE_DEFAULT_ALIGNMENT/sizeof(int64_t))-1;
     p[0] = nByte;
     p++;
   }else{
@@ -25802,7 +25843,7 @@ static void sqlite3MemFree(void *pPrior){
 #else
   sqlite3_int64 *p = (sqlite3_int64*)pPrior;
   assert( pPrior!=0 );
-  p--;
+  p -= (SQLITE_DEFAULT_ALIGNMENT/sizeof(int64_t));
   SQLITE_FREE(p);
 #endif
 }
@@ -25848,9 +25889,10 @@ static void *sqlite3MemRealloc(void *pPrior, int nByte){
   sqlite3_int64 *p = (sqlite3_int64*)pPrior;
   assert( pPrior!=0 && nByte>0 );
   assert( nByte==ROUND8(nByte) ); /* EV: R-46199-30249 */
-  p--;
-  p = SQLITE_REALLOC(p, nByte+8 );
+  p -= (SQLITE_DEFAULT_ALIGNMENT/sizeof(int64_t));
+  p = SQLITE_REALLOC(p, nByte+SQLITE_DEFAULT_ALIGNMENT );
   if( p ){
+    p += (SQLITE_DEFAULT_ALIGNMENT/sizeof(int64_t))-1;
     p[0] = nByte;
     p++;
   }else{
@@ -25973,19 +26015,24 @@ SQLITE_PRIVATE void sqlite3MemSetDefault(void){
 /*
 ** Each memory allocation looks like this:
 **
-**  ------------------------------------------------------------------------
-**  | Title |  backtrace pointers |  MemBlockHdr |  allocation |  EndGuard |
-**  ------------------------------------------------------------------------
+**  --------------------------------------------------------------------------
+**  | Pad | Title | backtrace pointers | MemBlockHdr | allocation | EndGuard |
+**  --------------------------------------------------------------------------
 **
 ** The application code sees only a pointer to the allocation.  We have
 ** to back up from the allocation pointer to find the MemBlockHdr.  The
 ** MemBlockHdr tells us the size of the allocation and the number of
 ** backtrace pointers.  There is also a guard word at the end of the
 ** MemBlockHdr.
+**
+** On CHERI systems we pad the front of the allocation to ensure
+** allocation is sufficently aligned.  We also exclude the EndGuard as it's
+** pointless with bounds.
 */
 struct MemBlockHdr {
   i64 iSize;                          /* Size of this allocation */
   struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */
+  void *pAllocation;                  /* What malloc allocated */
   char nBacktrace;                    /* Number of backtraces on this alloc */
   char nBacktraceSlots;               /* Available backtrace slots */
   u8 nTitle;                          /* Bytes of title; includes '\0' */
@@ -26086,17 +26133,31 @@ static struct MemBlockHdr *sqlite3MemsysGetHeader(const void *pAllocation){
   u8 *pU8;
   int nReserve;
 
+#ifndef __CHERI_PURE_CAPABILITY__
   p = (struct MemBlockHdr*)pAllocation;
   p--;
+#else
+  /*
+   * pAllocation's bounds don't contain p so walk the whole list
+   * to find the original.
+   */
+  for ( p = mem->pFirst; p != NULL; p = p->pNext ) {
+    if ( p + 1 == pAllocation )
+      break;
+  }
+  assert( p != NULL )
+#endif
   assert( p->iForeGuard==(int)FOREGUARD );
   nReserve = ROUND8(p->iSize);
   pInt = (int*)pAllocation;
   pU8 = (u8*)pAllocation;
+#ifndef __CHERI_PURE_CAPABILITY__
   assert( pInt[nReserve/sizeof(int)]==(int)REARGUARD );
   /* This checks any of the "extra" bytes allocated due
   ** to rounding up to an 8 byte boundary to ensure
   ** they haven't been overwritten.
   */
+#endif
   while( nReserve-- > p->iSize ) assert( pU8[nReserve]==0x65 );
   return p;
 }
@@ -26178,16 +26239,29 @@ static void *sqlite3MemMalloc(int nByte){
   void *p = 0;
   int totalSize;
   int nReserve;
+  int nPad = 0;
   sqlite3_mutex_enter(mem.mutex);
   assert( mem.disallow==0 );
   nReserve = ROUND8(nByte);
-  totalSize = nReserve + sizeof(*pHdr) + sizeof(int) +
+#ifdef __CHERI_PURE_CAPABILITY__
+  nReserve = __builtin_cheri_round_representable_length(nReserve);
+#endif
+  totalSize = nReserve + sizeof(*pHdr) +
                mem.nBacktrace*sizeof(void*) + mem.nTitle;
+#ifdef __CHERI_PURE_CAPABILITY__
+  int roundedSize = __builtin_cheri_round_representable_length(totalSize);
+  nPad = roundedSize - totalSize;
+  totalSize = roundedSize;
+#else
+  totalSize += sizeof(int);	/* EndGuard */
+#endif
   p = malloc(totalSize);
   if( p ){
     z = p;
+    z += nPad;
     pBt = (void**)&z[mem.nTitle];
     pHdr = (struct MemBlockHdr*)&pBt[mem.nBacktrace];
+    pHdr->pAllocation = p;
     pHdr->pNext = 0;
     pHdr->pPrev = mem.pLast;
     if( mem.pLast ){
@@ -26217,12 +26291,18 @@ static void *sqlite3MemMalloc(int nByte){
     pHdr->iSize = nByte;
     adjustStats(nByte, +1);
     pInt = (int*)&pHdr[1];
+#ifndef __CHERI_PURE_CAPABILITY__
     pInt[nReserve/sizeof(int)] = REARGUARD;
+#endif
     randomFill((char*)pInt, nByte);
     memset(((char*)pInt)+nByte, 0x65, nReserve-nByte);
     p = (void*)pInt;
   }
   sqlite3_mutex_leave(mem.mutex);
+#ifdef __CHERI_PURE_CAPABILITY__
+  if ( p != NULL )
+    p = __builtin_cheri_bounds_set_exact(p, nReserve);
+#endif
   return p;
 }
 
@@ -26233,6 +26313,7 @@ static void sqlite3MemFree(void *pPrior){
   struct MemBlockHdr *pHdr;
   void **pBt;
   char *z;
+  void *p;
   assert( sqlite3GlobalConfig.bMemstat || sqlite3GlobalConfig.bCoreMutex==0
        || mem.mutex!=0 );
   pHdr = sqlite3MemsysGetHeader(pPrior);
@@ -26253,12 +26334,13 @@ static void sqlite3MemFree(void *pPrior){
     assert( mem.pLast==pHdr );
     mem.pLast = pHdr->pPrev;
   }
+  p = pHdr->pAllocation;
   z = (char*)pBt;
   z -= pHdr->nTitle;
   adjustStats((int)pHdr->iSize, -1);
   randomFill(z, sizeof(void*)*pHdr->nBacktraceSlots + sizeof(*pHdr) +
                 (int)pHdr->iSize + sizeof(int) + pHdr->nTitle);
-  free(z);
+  free(p);
   sqlite3_mutex_leave(mem.mutex);
 }
 
@@ -54566,7 +54648,7 @@ static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){
   int sz;               /* Bytes of memory required to allocate the new cache */
 
   assert( (szPage & (szPage-1))==0 && szPage>=512 && szPage<=65536 );
-  assert( szExtra < 300 );
+  assert( szExtra < 400 ); // XXX: with CHERI we get szExtra=384 here
 
   sz = sizeof(PCache1) + sizeof(PGroup)*pcache1.separateCache;
   pCache = (PCache1 *)sqlite3MallocZero(sz);
@@ -60574,6 +60656,7 @@ SQLITE_PRIVATE int sqlite3PagerOpen(
   pPager->sjfd = (sqlite3_file*)pPtr;     pPtr += journalFileSize;
   pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;
   assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );
+  pPtr = __builtin_assume_aligned(pPtr, SQLITE_MALLOC_ALIGNMENT);
   memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);
 
   /* Fill in the Pager.zFilename and pPager.zQueryParam fields */
@@ -73346,6 +73429,7 @@ static int btreeCursor(
 
   /* Now that no other errors can occur, finish filling in the BtCursor
   ** variables and link the cursor into the BtShared list.  */
+  assert( EIGHT_BYTE_ALIGNMENT(pCur) );
   pCur->pgnoRoot = iTable;
   pCur->iPage = -1;
   pCur->pKeyInfo = pKeyInfo;
@@ -78022,6 +78106,7 @@ SQLITE_PRIVATE int sqlite3BtreeInsert(
         UnpackedRecord r;
         r.pKeyInfo = pCur->pKeyInfo;
         r.aMem = pX->aMem;
+        assert( EIGHT_BYTE_ALIGNMENT(r.aMem) );
         r.nField = pX->nMem;
         r.default_rc = 0;
         r.eqSeen = 0;
@@ -82244,6 +82329,7 @@ static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){
           assert( pRec->pKeyInfo->nAllField==nCol );
           assert( pRec->pKeyInfo->enc==ENC(db) );
           pRec->aMem = (Mem *)((u8*)pRec + ROUND8(sizeof(UnpackedRecord)));
+          assert( EIGHT_BYTE_ALIGNMENT(pRec->aMem) );
           for(i=0; i<nCol; i++){
             pRec->aMem[i].flags = MEM_Null;
             pRec->aMem[i].db = db;
@@ -82764,6 +82850,7 @@ SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){
     int i;
     int nCol = pRec->pKeyInfo->nAllField;
     Mem *aMem = pRec->aMem;
+    assert( EIGHT_BYTE_ALIGNMENT(aMem) );
     sqlite3 *db = aMem[0].db;
     for(i=0; i<nCol; i++){
       sqlite3VdbeMemRelease(&aMem[i]);
@@ -85108,6 +85195,7 @@ SQLITE_PRIVATE int sqlite3VdbeNextOpcode(
 SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){
   int i;
   Mem *aMem = VdbeFrameMem(p);
+  assert( EIGHT_BYTE_ALIGNMENT(aMem) );
   VdbeCursor **apCsr = (VdbeCursor **)&aMem[p->nChildMem];
   assert( sqlite3VdbeFrameIsValid(p) );
   for(i=0; i<p->nChildCsr; i++){
@@ -85461,6 +85549,7 @@ SQLITE_PRIVATE void sqlite3VdbeMakeReady(
   */
   x.nNeeded = 0;
   p->aMem = allocSpace(&x, 0, nMem*sizeof(Mem));
+  assert( EIGHT_BYTE_ALIGNMENT(p->aMem) );
   p->aVar = allocSpace(&x, 0, nVar*sizeof(Mem));
   p->apArg = allocSpace(&x, 0, nArg*sizeof(Mem*));
   p->apCsr = allocSpace(&x, 0, nCursor*sizeof(VdbeCursor*));
@@ -85546,6 +85635,7 @@ SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){
   v->aOp = pFrame->aOp;
   v->nOp = pFrame->nOp;
   v->aMem = pFrame->aMem;
+  assert( EIGHT_BYTE_ALIGNMENT(v->aMem) );
   v->nMem = pFrame->nMem;
   v->apCsr = pFrame->apCsr;
   v->nCursor = pFrame->nCursor;
@@ -86941,6 +87031,7 @@ SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord(
   p = (UnpackedRecord *)sqlite3DbMallocRaw(pKeyInfo->db, nByte);
   if( !p ) return 0;
   p->aMem = (Mem*)&((char*)p)[ROUND8P(sizeof(UnpackedRecord))];
+  assert( EIGHT_BYTE_ALIGNMENT(p->aMem) );
   assert( pKeyInfo->aSortFlags!=0 );
   p->pKeyInfo = pKeyInfo;
   p->nField = pKeyInfo->nKeyField + 1;
@@ -89396,10 +89487,13 @@ static const Mem *columnNullValue(void){
   ** that a Mem structure is located on an 8-byte boundary. To prevent
   ** these assert()s from failing, when building with SQLITE_DEBUG defined
   ** using gcc, we force nullMem to be 8-byte aligned using the magical
-  ** __attribute__((aligned(8))) macro.  */
+  ** __attribute__((aligned(8))) macro.
+  ** For CheriABI, such alignment is increased to 16 bytes to satisfy that the
+  ** returned capability is appropriately aligned for CHERI architectures.
+  */
   static const Mem nullMem
 #if defined(SQLITE_DEBUG) && defined(__GNUC__)
-    __attribute__((aligned(8)))
+    __attribute__((aligned(SQLITE_DEFAULT_ALIGNMENT)))
 #endif
     = {
         /* .u          = */ {0},
@@ -91010,9 +91104,10 @@ static VdbeCursor *allocateCursor(
 
   int nByte;
   VdbeCursor *pCx = 0;
-  nByte =
-      ROUND8P(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField +
-      (eCurType==CURTYPE_BTREE?sqlite3BtreeCursorSize():0);
+  size_t basicSize = ROUND8(ROUND8P(sizeof(VdbeCursor)) + 2*sizeof(u32)*nField);
+  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(basicSize)) );
+  nByte = ROUND8(basicSize + (eCurType==CURTYPE_BTREE?sqlite3BtreeCursorSize():0));
+  assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(nByte)) );
 
   assert( iCur>=0 && iCur<p->nCursor );
   if( p->apCsr[iCur] ){ /*OPTIMIZATION-IF-FALSE*/
@@ -91045,8 +91140,9 @@ static VdbeCursor *allocateCursor(
   pCx->nField = nField;
   pCx->aOffset = &pCx->aType[nField];
   if( eCurType==CURTYPE_BTREE ){
-    pCx->uc.pCursor = (BtCursor*)
-        &pMem->z[ROUND8P(sizeof(VdbeCursor))+2*sizeof(u32)*nField];
+    assert( EIGHT_BYTE_ALIGNMENT(SQLITE_INT_TO_PTR(basicSize)) );
+    pCx->uc.pCursor = (BtCursor*)&pMem->z[basicSize];
+    assert( EIGHT_BYTE_ALIGNMENT(pCx->uc.pCursor) );
     sqlite3BtreeCursorZero(pCx->uc.pCursor);
   }
   return pCx;
@@ -91472,6 +91568,7 @@ SQLITE_PRIVATE int sqlite3VdbeExec(
   u64 nProgressLimit;        /* Invoke xProgress() when nVmStep reaches this */
 #endif
   Mem *aMem = p->aMem;       /* Copy of p->aMem */
+  assert( EIGHT_BYTE_ALIGNMENT(aMem) );
   Mem *pIn1 = 0;             /* 1st input operand */
   Mem *pIn2 = 0;             /* 2nd input operand */
   Mem *pIn3 = 0;             /* 3rd input operand */
@@ -91922,6 +92019,7 @@ case OP_Halt: {
     }
     aOp = p->aOp;
     aMem = p->aMem;
+    assert( EIGHT_BYTE_ALIGNMENT(aMem) );
     pOp = &aOp[pcx];
     break;
   }
@@ -95490,6 +95588,7 @@ case OP_SeekGT: {       /* jump, in3, group, ncycle */
     assert( oc!=OP_SeekLT || r.default_rc==+1 );
 
     r.aMem = &aMem[pOp->p3];
+    assert( EIGHT_BYTE_ALIGNMENT(r.aMem) );
 #ifdef SQLITE_DEBUG
     {
       int i;
@@ -95918,6 +96017,7 @@ case OP_Found: {        /* jump, in3, ncycle */
   pC->seekOp = pOp->opcode;
 #endif
   r.aMem = &aMem[pOp->p3];
+  assert( EIGHT_BYTE_ALIGNMENT(r.aMem) );
   assert( pC->eCurType==CURTYPE_BTREE );
   assert( pC->uc.pCursor!=0 );
   assert( pC->isTable==0 );
@@ -97080,6 +97180,7 @@ case OP_IdxInsert: {        /* in2 */
   x.nKey = pIn2->n;
   x.pKey = pIn2->z;
   x.aMem = aMem + pOp->p3;
+  assert( EIGHT_BYTE_ALIGNMENT(x.aMem) );
   x.nMem = (u16)pOp->p4.i;
   rc = sqlite3BtreeInsert(pC->uc.pCursor, &x,
        (pOp->p5 & (OPFLAG_APPEND|OPFLAG_SAVEPOSITION|OPFLAG_PREFORMAT)),
@@ -97150,6 +97251,7 @@ case OP_IdxDelete: {
   r.nField = (u16)pOp->p3;
   r.default_rc = 0;
   r.aMem = &aMem[pOp->p2];
+  assert( EIGHT_BYTE_ALIGNMENT(r.aMem) );
   rc = sqlite3BtreeIndexMoveto(pCrsr, &r, &res);
   if( rc ) goto abort_due_to_error;
   if( res==0 ){
@@ -97338,6 +97440,8 @@ case OP_IdxGE:  {       /* jump, ncycle */
     r.default_rc = 0;
   }
   r.aMem = &aMem[pOp->p3];
+  assert( EIGHT_BYTE_ALIGNMENT(r.aMem) );
+
 #ifdef SQLITE_DEBUG
   {
     int i;
@@ -97931,6 +98035,8 @@ case OP_Program: {        /* jump */
     pFrame->nChildCsr = pProgram->nCsr;
     pFrame->pc = (int)(pOp - aOp);
     pFrame->aMem = p->aMem;
+    assert( EIGHT_BYTE_ALIGNMENT(pFrame->aMem) );
+
     pFrame->nMem = p->nMem;
     pFrame->apCsr = p->apCsr;
     pFrame->nCursor = p->nCursor;
@@ -97942,6 +98048,7 @@ case OP_Program: {        /* jump */
 #endif
 
     pEnd = &VdbeFrameMem(pFrame)[pFrame->nChildMem];
+    assert( EIGHT_BYTE_ALIGNMENT(aMem) );
     for(pMem=VdbeFrameMem(pFrame); pMem!=pEnd; pMem++){
       pMem->flags = MEM_Undefined;
       pMem->db = db;
@@ -97966,6 +98073,7 @@ case OP_Program: {        /* jump */
   p->nChange = 0;
   p->pFrame = pFrame;
   p->aMem = aMem = VdbeFrameMem(pFrame);
+  assert( EIGHT_BYTE_ALIGNMENT(aMem) );
   p->nMem = pFrame->nChildMem;
   p->nCursor = (u16)pFrame->nChildCsr;
   p->apCsr = (VdbeCursor **)&aMem[p->nMem];
@@ -101912,6 +102020,7 @@ static int vdbeSorterFlushPMA(VdbeSorter *pSorter){
       assert( pTask->list.aMemory==0 || pSorter->list.aMemory!=0 );
 
       aMem = pTask->list.aMemory;
+      assert( EIGHT_BYTE_ALIGNMENT(aMem) );
       pCtx = (void*)pTask;
       pSorter->iPrev = (u8)(pTask - pSorter->aTask);
       pTask->list = pSorter->list;
@@ -118479,7 +118588,7 @@ SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){
   char *zSql;
   sqlite3 *db = pParse->db;
   u32 savedDbFlags = db->mDbFlags;
-  char saveBuf[PARSE_TAIL_SZ];
+  Parse saveParse;
 
   if( pParse->nErr ) return;
   if( pParse->eParseMode ) return;
@@ -118496,13 +118605,13 @@ SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){
     return;
   }
   pParse->nested++;
-  memcpy(saveBuf, PARSE_TAIL(pParse), PARSE_TAIL_SZ);
+  memcpy(PARSE_TAIL(&saveParse), PARSE_TAIL(pParse), PARSE_TAIL_SZ);
   memset(PARSE_TAIL(pParse), 0, PARSE_TAIL_SZ);
   db->mDbFlags |= DBFLAG_PreferBuiltin;
   sqlite3RunParser(pParse, zSql);
   db->mDbFlags = savedDbFlags;
   sqlite3DbFree(db, zSql);
-  memcpy(PARSE_TAIL(pParse), saveBuf, PARSE_TAIL_SZ);
+  memcpy(PARSE_TAIL(pParse), PARSE_TAIL(&saveParse), PARSE_TAIL_SZ);
   pParse->nested--;
 }
 
@@ -242635,7 +242744,7 @@ static void fts5SourceIdFunc(
 ){
   assert( nArg==0 );
   UNUSED_PARAM2(nArg, apUnused);
-  sqlite3_result_text(pCtx, "fts5: 2023-05-16 12:36:15 831d0fb2836b71c9bc51067c49fee4b8f18047814f2ff22d817d25195cf350b0", -1, SQLITE_TRANSIENT);
+  sqlite3_result_text(pCtx, "fts5:  ", -1, SQLITE_TRANSIENT);
 }
 
 /*
diff --git libpkg/Makefile.autosetup libpkg/Makefile.autosetup
index d82eb9980..0d8df868d 100644
--- libpkg/Makefile.autosetup
+++ libpkg/Makefile.autosetup
@@ -125,7 +125,7 @@ LOCAL_LDFLAGS+=	-L$(top_builddir)/external/libmachista -lmachista_pic \
 SRCS+=		pkg_macho.c
 @else
 SRCS+=		pkg_elf.c
-LOCAL_LDFLAGS+=	-Wl,--version-script=$(top_srcdir)/libpkg/libpkg.ver \
+LOCAL_LDFLAGS+=	-Wl,--version-script=$(top_srcdir)/libpkg/libpkg.ver,--undefined-version \
 @endif
 
 @if libelf-internal
diff --git libpkg/pkg.h.in libpkg/pkg.h.in
index bb8103231..49685e8d9 100644
--- libpkg/pkg.h.in
+++ libpkg/pkg.h.in
@@ -64,9 +64,14 @@ extern "C" {
 
 #define PKG_PORTVERSION "@VERSION@"
 
-/* The OS major version at the time of compilation */
-#ifdef __FreeBSD__
-#define OSMAJOR	__FreeBSD__
+/*
+ * The OS major version at the time of compilation.
+ *
+ * CheriBSD doesn't have the notion of the major OS version, i.e. two ABI
+ * versions are always treated as possibly incompatible.
+ */
+#ifdef __CheriBSD_version
+#define OSMAJOR	__CheriBSD_version
 #endif
 
 /* Not supported under DragonFly */
diff --git libpkg/pkg_config.c libpkg/pkg_config.c
index a2d40d8f9..787592847 100644
--- libpkg/pkg_config.c
+++ libpkg/pkg_config.c
@@ -100,13 +100,13 @@ static struct config_entry c[] = {
 	{
 		PKG_STRING,
 		"PKG_DBDIR",
-		"/var/db/pkg",
+		"/var/db/pkg" PKG_SUFFIX,
 		"Where the package databases are stored",
 	},
 	{
 		PKG_STRING,
 		"PKG_CACHEDIR",
-		"/var/cache/pkg",
+		"/var/cache/pkg" PKG_SUFFIX,
 		"Directory containing cache of downloaded packages",
 	},
 	{
@@ -148,7 +148,7 @@ static struct config_entry c[] = {
 	{
 		PKG_ARRAY,
 		"REPOS_DIR",
-		"/etc/pkg/,"PREFIX"/etc/pkg/repos/",
+		"/etc/pkg" PKG_SUFFIX "/," PREFIX "/etc/pkg/repos/",
 		"Location of the repository configuration files"
 	},
 	{
diff --git libpkg/pkg_elf.c libpkg/pkg_elf.c
index 05512c369..5a69eb620 100644
--- libpkg/pkg_elf.c
+++ libpkg/pkg_elf.c
@@ -183,6 +183,8 @@ shlib_valid_abi(const char *fpath, GElf_Ehdr *hdr, const char *abi)
 					strlcpy(wordsize, p + 1, MIN((long)sizeof(wordsize), t - p));
 				break;
 			}
+		} else {
+			break;
 		}
 	}
 	/* Invalid ABI line */
@@ -716,6 +718,92 @@ aeabi_parse_arm_attributes(void *data, size_t length)
 #undef MOVE
 }
 
+/*
+ * elf_note_analyse_cheribsd() looks for a second ELF note indicating that
+ * a binary was built for CheriBSD and overwrites OS information relevant for
+ * CheriBSD.
+ */
+static bool
+elf_note_analyse_cheribsd(Elf_Data *data, GElf_Ehdr *elfhdr, struct os_info *oi)
+{
+	Elf_Note note;
+	char *src, *src_version;
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+	char *src_benchmarkabi;
+	uint32_t benchmarkabi;
+#endif
+	uint32_t version;
+
+	src = data->d_buf;
+	src_version = NULL;
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+	src_benchmarkabi = NULL;
+#endif
+
+	while ((uintptr_t)src < ((uintptr_t)data->d_buf + data->d_size)) {
+		memcpy(&note, src, sizeof(note));
+		src += sizeof(note);
+		if (strncmp((const char *)src, "CheriBSD",
+		    note.n_namesz) == 0) {
+			if (src_version == NULL && note.n_type ==
+			    NT_VERSION) {
+				src_version = src + roundup2(note.n_namesz, 4);
+			}
+		}
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+		if (strncmp ((const char *) src, "CHERI", note.n_namesz) == 0) {
+			if (src_benchmarkabi == NULL && note.n_type ==
+			    NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI) {
+				src_benchmarkabi = src +
+				    roundup2(note.n_namesz, 4);
+			}
+		}
+#endif
+		src += roundup2(note.n_namesz + note.n_descsz, 4);
+	}
+
+	if (src_version != NULL) {
+		if (strcmp(oi->name, "FreeBSD") == 0) {
+			/* Overwrite a vendor with CheriBSD. */
+			free(oi->name);
+			oi->name = xstrdup("CheriBSD");
+		}
+
+		if (strcmp(oi->name, "CheriBSD") == 0) {
+			if (elfhdr->e_ident[EI_DATA] == ELFDATA2MSB)
+				version = be32dec(src_version);
+			else
+				version = le32dec(src_version);
+
+			/*
+			 * Overwrite a version with a CheriBSD ABI version.
+			 *
+			 * Note that minor and major versions are left from
+			 * FreeBSD.
+			 */
+			free(oi->version);
+			xasprintf(&oi->version, "%d", version);
+		}
+	}
+
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+	if (src_benchmarkabi != NULL) {
+		if (elfhdr->e_ident[EI_DATA] == ELFDATA2MSB)
+			benchmarkabi = be32dec(src_benchmarkabi);
+		else
+			benchmarkabi = le32dec(src_benchmarkabi);
+		if (benchmarkabi != 0 && benchmarkabi != 1) {
+			pkg_emit_error("Invalid NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI description data: 0x%x.",
+			    benchmarkabi);
+			return (false);
+		}
+		oi->benchmarkabi = benchmarkabi;
+	}
+#endif
+
+	return (true);
+}
+
 static bool
 elf_note_analyse(Elf_Data *data, GElf_Ehdr *elfhdr, struct os_info *oi)
 {
@@ -751,7 +839,7 @@ elf_note_analyse(Elf_Data *data, GElf_Ehdr *elfhdr, struct os_info *oi)
 		src += roundup2(note.n_namesz + note.n_descsz, 4);
 	}
 	if ((uintptr_t)src >= ((uintptr_t)data->d_buf + data->d_size)) {
-		return (false);
+		goto out;
 	}
 	free(oi->name);
 	if (version_style == 2) {
@@ -810,7 +898,8 @@ elf_note_analyse(Elf_Data *data, GElf_Ehdr *elfhdr, struct os_info *oi)
 		xasprintf(&oi->version, "%d", version / 100000);
 	}
 
-	return (true);
+out:
+	return (elf_note_analyse_cheribsd(data, elfhdr, oi));
 }
 
 
@@ -826,16 +915,20 @@ pkg_get_myarch_elfparse(char *dest, size_t sz, struct os_info *oi)
 	int fd, i;
 	int ret = EPKG_OK;
 	const char *arch, *abi, *endian_corres_str, *wordsize_corres_str, *fpu;
-	bool checkroot;
+	bool checkroot, cheriabi;
 	struct os_info loi;
 
 	const char *abi_files[] = {
 		getenv("ABI_FILE"),
+#ifdef PKG_ABI_FILE
+		PKG_ABI_FILE,
+#endif
 		_PATH_UNAME,
 		_PATH_BSHELL,
 	};
 
 	arch = NULL;
+	cheriabi = false;
 
 	if (oi == NULL) {
 		memset(&loi, 0, sizeof(loi));
@@ -1003,6 +1096,21 @@ pkg_get_myarch_elfparse(char *dest, size_t sz, struct os_info *oi)
 		    ":%s:%s:%s:%s:%s", arch, wordsize_corres_str,
 		    endian_corres_str, abi, fpu);
 		break;
+	case EM_AARCH64:
+#if defined(EF_AARCH64_CHERI_PURECAP)
+		if (elfhdr.e_flags & EF_AARCH64_CHERI_PURECAP) {
+			cheriabi = true;
+		}
+#endif
+		snprintf(dest + strlen(dest), sz - strlen(dest), ":%s:%s%s%s",
+		    arch, wordsize_corres_str, cheriabi ? ":cheri" : "",
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+		    cheriabi && oi->benchmarkabi ? ":benchmark" : ""
+#else
+		    ""
+#endif
+		    );
+		break;
 	case EM_MIPS:
 		/*
 		 * this is taken from binutils sources:
@@ -1045,8 +1153,14 @@ pkg_get_myarch_elfparse(char *dest, size_t sz, struct os_info *oi)
 				abi = "unknown";
 				break;
 		}
-		snprintf(dest + strlen(dest), sz - strlen(dest), ":%s:%s:%s",
-		    arch, wordsize_corres_str, abi);
+#if defined(EF_RISCV_CHERIABI)
+		if (elfhdr.e_flags & EF_RISCV_CHERIABI) {
+			cheriabi = true;
+		}
+#endif
+		snprintf(dest + strlen(dest), sz - strlen(dest),
+		    ":%s:%s%s:%s",
+		    arch, wordsize_corres_str, cheriabi ? ":cheri" : "", abi);
 		break;
 #endif
 	case EM_PPC:
diff --git libpkg/private/elf_tables.h libpkg/private/elf_tables.h
index e69d43e28..5bc5dbd4f 100644
--- libpkg/private/elf_tables.h
+++ libpkg/private/elf_tables.h
@@ -98,6 +98,8 @@ static struct arch_trans machine_arch_translation[] = {
 	{ "armv7:32:el:eabi:softfp", "armv7" },
 	{ "armv7:32:el:eabi:hardfp", "armv7" },
 	{ "aarch64:64", "aarch64" },
+	{ "aarch64:64:cheri", "aarch64c" },
+	{ "aarch64:64:cheri:benchmark", "aarch64cb" },
 	/* And now MIPS */
 	{ "mips:32:el:o32", "mipsel" },
 	{ "mips:32:el:n32", "mipsn32el" },
@@ -109,6 +111,7 @@ static struct arch_trans machine_arch_translation[] = {
 	{ "riscv:32:hf", "riscv32" },
 	{ "riscv:32:sf", "riscv32sf" },
 	{ "riscv:64:hf", "riscv64" },
+	{ "riscv:64:cheri:hf", "riscv64c" },
 	{ "riscv:64:sf", "riscv64sf" },
 
 	{ NULL, NULL }
diff --git libpkg/private/pkg.h libpkg/private/pkg.h
index 50b82ac8a..e199b7417 100644
--- libpkg/private/pkg.h
+++ libpkg/private/pkg.h
@@ -34,6 +34,7 @@
 #include <sys/param.h>
 #include <sys/cdefs.h>
 #include <sys/types.h>
+#include <sys/elf_common.h>
 
 #include <archive.h>
 #include <sqlite3.h>
@@ -605,6 +606,9 @@ struct os_info {
 	char *version_major;
 	char *version_minor;
 	char *arch;
+#if defined(NT_CHERI_MORELLO_PURECAP_BENCHMARK_ABI)
+	uint32_t benchmarkabi;
+#endif
 };
 
 int pkg_get_myarch(char *pkgarch, size_t sz, struct os_info *);
