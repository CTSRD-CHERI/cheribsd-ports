diff --git CMakeLists.txt CMakeLists.txt
index 47facacf9..3d2eb6598 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -195,6 +195,7 @@ set_package_properties(Wayland PROPERTIES
     TYPE REQUIRED
     PURPOSE "Required for building KWin with Wayland support"
 )
+option(KWIN_BUILD_DRM_BACKEND "Enable building of KWin DRM backend" ON)
 
 find_package(WaylandProtocols 1.31)
 set_package_properties(WaylandProtocols PROPERTIES
@@ -243,15 +244,22 @@ set_package_properties(UDev PROPERTIES
     PURPOSE "Required for input handling on Wayland."
 )
 
-find_package(Libdrm 2.4.112)
-set_package_properties(Libdrm PROPERTIES TYPE REQUIRED PURPOSE "Required for drm output on Wayland.")
+find_package(Libseat)
+set_package_properties(Libseat PROPERTIES
+    TYPE OPTIONAL
+)
 
-find_package(gbm)
-set_package_properties(gbm PROPERTIES TYPE REQUIRED PURPOSE "Required for egl output of drm backend.")
-if (gbm_VERSION VERSION_GREATER_EQUAL 21.1)
-    set(HAVE_GBM_BO_GET_FD_FOR_PLANE 1)
-else()
-    set(HAVE_GBM_BO_GET_FD_FOR_PLANE 0)
+if (KWIN_BUILD_DRM_BACKEND)
+    find_package(Libdrm 2.4.112)
+    set_package_properties(Libdrm PROPERTIES TYPE REQUIRED PURPOSE "Required for drm output on Wayland.")
+
+    find_package(gbm)
+    set_package_properties(gbm PROPERTIES TYPE REQUIRED PURPOSE "Required for egl output of drm backend.")
+    if (gbm_VERSION VERSION_GREATER_EQUAL 21.1)
+        set(HAVE_GBM_BO_GET_FD_FOR_PLANE 1)
+    else()
+        set(HAVE_GBM_BO_GET_FD_FOR_PLANE 0)
+    endif()
 endif()
 if (gbm_VERSION VERSION_GREATER_EQUAL 21.3)
     set(HAVE_GBM_BO_CREATE_WITH_MODIFIERS2 1)
diff --git cmake/modules/FindLibseat.cmake cmake/modules/FindLibseat.cmake
new file mode 100644
index 000000000..8d2304d6c
--- /dev/null
+++ cmake/modules/FindLibseat.cmake
@@ -0,0 +1,37 @@
+#.rst:
+# FindLibseat
+# -------
+#
+# Try to find libseat on a Unix system.
+#
+# This will define the following variables:
+#
+# ``Libseat_FOUND``
+#     True if (the requested version of) libseat is available
+# ``Libseat_VERSION``
+#     The version of libseat
+
+#=============================================================================
+# SPDX-FileCopyrightText: 2016 Martin Gräßlin <mgraesslin@kde.org>
+# SPDX-FileCopyrightText: 2021 Vlad Zahorodnii <vlad.zahorodnii@kde.org>
+# SPDX-FileCopyrightText: 2022 Jessica Clarke <jrtc27@jrtc27.com>
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#=============================================================================
+
+find_package(PkgConfig)
+pkg_check_modules(PKG_libseat QUIET libseat)
+
+set(Libseat_VERSION ${PKG_libseat_VERSION})
+
+find_library(Libseat_LIBRARY NAMES seat HINTS ${PKG_Libseat_LIBRARY_DIRS})
+
+find_package_handle_standard_args(Libseat
+    FOUND_VAR Libseat_FOUND
+    REQUIRED_VARS Libseat_LIBRARY
+    VERSION_VAR Libseat_VERSION
+)
+
+mark_as_advanced(
+    Libseat_VERSION
+)
diff --git src/CMakeLists.txt src/CMakeLists.txt
index 2fce33f3f..61e04a660 100644
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -299,6 +299,11 @@ if (KWIN_BUILD_TABBOX)
     target_link_libraries(kwin Qt::GuiPrivate)
 endif()
 
+if (Libseat_FOUND)
+    target_sources(kwin PRIVATE core/session_libseat.cpp)
+    target_link_libraries(kwin ${Libseat_LIBRARY})
+endif()
+
 qt_generate_dbus_interface(virtualkeyboard_dbus.h org.kde.kwin.VirtualKeyboard.xml OPTIONS -A)
 qt_generate_dbus_interface(tabletmodemanager.h org.kde.KWin.TabletModeManager.xml OPTIONS -A)
 
diff --git src/appmenu.cpp src/appmenu.cpp
index 4b51c4cd7..21a7b364a 100644
--- src/appmenu.cpp
+++ src/appmenu.cpp
@@ -43,7 +43,8 @@ ApplicationMenu::ApplicationMenu()
         Q_EMIT applicationMenuEnabledChanged(false);
     });
 
-    m_applicationMenuEnabled = QDBusConnection::sessionBus().interface()->isServiceRegistered(QStringLiteral("org.kde.kappmenu"));
+    m_applicationMenuEnabled =
+        QDBusConnection::sessionBus().interface() && QDBusConnection::sessionBus().interface()->isServiceRegistered(QStringLiteral("org.kde.kappmenu"));
 }
 
 bool ApplicationMenu::applicationMenuEnabled() const
@@ -53,6 +54,8 @@ bool ApplicationMenu::applicationMenuEnabled() const
 
 void ApplicationMenu::setViewEnabled(bool enabled)
 {
+    if (!QDBusConnection::sessionBus().interface())
+        return;
     if (enabled) {
         QDBusConnection::sessionBus().interface()->registerService(s_viewService,
                                                                    QDBusConnectionInterface::QueueService,
diff --git src/backends/CMakeLists.txt src/backends/CMakeLists.txt
index 93e19918d..7de94556f 100644
--- src/backends/CMakeLists.txt
+++ src/backends/CMakeLists.txt
@@ -1,4 +1,6 @@
-add_subdirectory(drm)
+if (KWIN_BUILD_DRM_BACKEND)
+    add_subdirectory(drm)
+endif()
 add_subdirectory(fakeinput)
 add_subdirectory(libinput)
 add_subdirectory(virtual)
diff --git src/backends/drm/drm_dumb_buffer.cpp src/backends/drm/drm_dumb_buffer.cpp
index b69184be5..3360f86e8 100644
--- src/backends/drm/drm_dumb_buffer.cpp
+++ src/backends/drm/drm_dumb_buffer.cpp
@@ -47,7 +47,7 @@ bool DrmDumbBuffer::map(QImage::Format format)
 #ifdef KWIN_UNIT_TEST
     m_memory = reinterpret_cast<void *>(mapArgs.offset);
 #else
-    void *address = mmap(nullptr, m_bufferSize, PROT_WRITE, MAP_SHARED, m_gpu->fd(), mapArgs.offset);
+    void *address = mmap(nullptr, m_bufferSize, PROT_READ | PROT_WRITE, MAP_SHARED, m_gpu->fd(), mapArgs.offset);
     if (address == MAP_FAILED) {
         return false;
     }
diff --git src/config-kwin.h.cmake src/config-kwin.h.cmake
index b5209c0e2..787cc955d 100644
--- src/config-kwin.h.cmake
+++ src/config-kwin.h.cmake
@@ -34,3 +34,5 @@
 #cmakedefine01 PipeWire_FOUND
 
 #cmakedefine01 HAVE_XWAYLAND_LISTENFD
+
+#cmakedefine Libseat_FOUND 1
diff --git src/core/session.cpp src/core/session.cpp
index 0e0b7f457..1593f7b68 100644
--- src/core/session.cpp
+++ src/core/session.cpp
@@ -5,7 +5,13 @@
 */
 
 #include "session.h"
+
+#include <config-kwin.h>
+
 #include "session_consolekit.h"
+#ifdef Libseat_FOUND
+#include "session_libseat.h"
+#endif
 #include "session_logind.h"
 #include "session_noop.h"
 
@@ -19,6 +25,9 @@ static const struct
 } s_availableSessions[] = {
     {Session::Type::Logind, &LogindSession::create},
     {Session::Type::ConsoleKit, &ConsoleKitSession::create},
+#ifdef Libseat_FOUND
+    { Session::Type::Libseat, &LibseatSession::create },
+#endif
     {Session::Type::Noop, &NoopSession::create},
 };
 
diff --git src/core/session.h src/core/session.h
index 7bcf8f221..86b772c67 100644
--- src/core/session.h
+++ src/core/session.h
@@ -35,6 +35,7 @@ public:
     enum class Type {
         Noop,
         ConsoleKit,
+        Libseat,
         Logind,
     };
 
diff --git src/core/session_consolekit.cpp src/core/session_consolekit.cpp
index 94c07642b..f07969d92 100644
--- src/core/session_consolekit.cpp
+++ src/core/session_consolekit.cpp
@@ -110,7 +110,7 @@ static bool activate(const QString &sessionPath)
 
 std::unique_ptr<ConsoleKitSession> ConsoleKitSession::create()
 {
-    if (!QDBusConnection::systemBus().interface()->isServiceRegistered(s_serviceName)) {
+    if (!QDBusConnection::systemBus().interface() || !QDBusConnection::systemBus().interface()->isServiceRegistered(s_serviceName)) {
         return nullptr;
     }
 
diff --git src/core/session_libseat.cpp src/core/session_libseat.cpp
new file mode 100644
index 000000000..13fa62ea8
--- /dev/null
+++ src/core/session_libseat.cpp
@@ -0,0 +1,214 @@
+/*
+    SPDX-FileCopyrightText: 2021 Vlad Zahorodnii <vlad.zahorodnii@kde.org>
+    SPDX-FileCopyrightText: 2022 Jessica Clarke <jrtc27@jrtc27.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#include "session_libseat.h"
+#include "main.h"
+#include "utils/common.h"
+#include "wayland_server.h"
+
+#include "wayland/display.h"
+
+#include <fcntl.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <unistd.h>
+
+#include <libseat.h>
+
+#include <wayland-server-core.h>
+
+namespace KWin
+{
+
+class LibseatSessionPrivate {
+public:
+    static void handleEnableSeat(struct libseat *seat, void *data)
+    {
+        LibseatSession *session = (LibseatSession *)data;
+        Q_EMIT session->handleEnableSeat();
+        Q_UNUSED(seat);
+    }
+
+    static void handleDisableSeat(struct libseat *seat, void *data)
+    {
+        LibseatSession *session = (LibseatSession *)data;
+        Q_EMIT session->handleDisableSeat();
+        Q_UNUSED(seat);
+    }
+};
+
+static const struct libseat_seat_listener s_listener = {
+    .enable_seat = &LibseatSessionPrivate::handleEnableSeat,
+    .disable_seat = &LibseatSessionPrivate::handleDisableSeat,
+};
+
+static int libseatEvent(int fd, uint32_t mask, void *data)
+{
+    struct libseat *seat = (struct libseat *)data;
+    if (libseat_dispatch(seat, 0) == -1) {
+        qCDebug(KWIN_CORE, "Failed to dispatch libseat event (%s)",
+                strerror(errno));
+    }
+    Q_UNUSED(fd);
+    Q_UNUSED(mask);
+    return 1;
+}
+
+std::unique_ptr<LibseatSession> LibseatSession::create()
+{
+    // We're lazy and abuse Wayland event loop since we don't care about
+    // X11, rather than dealing with creating our own thread as is used
+    // for D-Bus behind the scenes.
+    if (!waylandServer()) {
+        return nullptr;
+    }
+
+    std::unique_ptr<LibseatSession> session{new LibseatSession()};
+    struct libseat *seat = libseat_open_seat(&s_listener,
+                                             (void *)session.get());
+    if (!seat) {
+        return nullptr;
+    }
+
+    struct wl_event_loop *eventLoop = wl_display_get_event_loop(*waylandServer()->display());
+    struct wl_event_source *eventSource =
+        wl_event_loop_add_fd(eventLoop, libseat_get_fd(seat), WL_EVENT_READABLE,
+                             libseatEvent, seat);
+    if (!eventSource) {
+        qCDebug(KWIN_CORE, "Failed to add libseat event source (%s)",
+                strerror(errno));
+        libseat_close_seat(seat);
+        return nullptr;
+    }
+
+    if (libseat_dispatch(seat, 0) == -1) {
+        qCDebug(KWIN_CORE, "Failed to dispatch libseat event (%s)",
+                strerror(errno));
+        libseat_close_seat(seat);
+        wl_event_source_remove(eventSource);
+        return nullptr;
+    }
+
+    session->initialize(seat, eventSource);
+    return session;
+}
+
+LibseatSession::LibseatSession()
+    : Session()
+    , m_seat(nullptr)
+    , m_eventSource(nullptr)
+{
+}
+
+void LibseatSession::initialize(struct libseat *seat, struct wl_event_source *eventSource)
+{
+    m_seat = seat;
+    m_eventSource = eventSource;
+}
+
+LibseatSession::~LibseatSession()
+{
+    if (m_seat) {
+        libseat_close_seat(m_seat);
+    }
+    if (m_eventSource) {
+        wl_event_source_remove(m_eventSource);
+    }
+}
+
+bool LibseatSession::isActive() const
+{
+    return m_isActive;
+}
+
+LibseatSession::Capabilities LibseatSession::capabilities() const
+{
+    return Capability::SwitchTerminal;
+}
+
+QString LibseatSession::seat() const
+{
+    return QString::fromUtf8(libseat_seat_name(m_seat));
+}
+
+uint LibseatSession::terminal() const
+{
+    return 0;
+}
+
+int LibseatSession::openRestricted(const QString &fileName)
+{
+    struct stat st;
+    if (stat(fileName.toUtf8(), &st) < 0) {
+        return -1;
+    }
+
+    int fileDescriptor;
+    int libseatId = libseat_open_device(m_seat, fileName.toUtf8(), &fileDescriptor);
+    if (libseatId == -1) {
+        qCDebug(KWIN_CORE, "Failed to open %s device (%s)",
+                qPrintable(fileName), strerror(errno));
+        return -1;
+    }
+
+    m_devices.push_back({libseatId, fileDescriptor, st.st_rdev});
+    return fileDescriptor;
+}
+
+void LibseatSession::closeRestricted(int fileDescriptor)
+{
+    auto it = std::find_if(m_devices.begin(), m_devices.end(),
+        [fileDescriptor](const LibseatDevice &device) {
+            return device.fileDescriptor == fileDescriptor;
+        }
+    );
+    if (it == m_devices.end()) {
+        qCDebug(KWIN_CORE, "Tried to close unknown device FD %d",
+                fileDescriptor);
+        close(fileDescriptor);
+        return;
+    }
+
+    libseat_close_device(m_seat, it->libseatId);
+    m_devices.erase(it);
+    close(fileDescriptor);
+}
+
+void LibseatSession::switchTo(uint terminal)
+{
+    if (libseat_switch_session(m_seat, terminal) == -1) {
+        qCDebug(KWIN_CORE, "Failed to switch to terminal %d (%s)",
+                terminal, strerror(errno));
+    }
+}
+
+void LibseatSession::updateActive(bool active)
+{
+    if (m_isActive != active) {
+        m_isActive = active;
+        Q_EMIT activeChanged(active);
+    }
+}
+
+void LibseatSession::handleEnableSeat()
+{
+    for (const LibseatDevice &device : m_devices) {
+        Q_EMIT deviceResumed(device.deviceId);
+    }
+    updateActive(true);
+}
+
+void LibseatSession::handleDisableSeat()
+{
+    updateActive(false);
+    for (const LibseatDevice &device : m_devices) {
+        Q_EMIT devicePaused(device.deviceId);
+    }
+    libseat_disable_seat(m_seat);
+}
+
+} // namespace KWin
diff --git src/core/session_libseat.h src/core/session_libseat.h
new file mode 100644
index 000000000..5b6c5d59b
--- /dev/null
+++ src/core/session_libseat.h
@@ -0,0 +1,65 @@
+/*
+    SPDX-FileCopyrightText: 2021 Vlad Zahorodnii <vlad.zahorodnii@kde.org>
+    SPDX-FileCopyrightText: 2022 Jessica Clarke <jrtc27@jrtc27.com>
+
+    SPDX-License-Identifier: GPL-2.0-or-later
+*/
+
+#pragma once
+
+#include "session.h"
+
+struct libseat;
+struct wl_event_source;
+
+namespace KWin
+{
+
+namespace Wayland
+{
+class WaylandBackend;
+}
+
+class LibseatSessionPrivate;
+
+class LibseatSession : public Session
+{
+    Q_OBJECT
+
+    struct LibseatDevice {
+        int libseatId;
+        int fileDescriptor;
+        dev_t deviceId;
+    };
+
+public:
+    static std::unique_ptr<LibseatSession> create();
+    ~LibseatSession() override;
+
+    bool isActive() const override;
+    Capabilities capabilities() const override;
+    QString seat() const override;
+    uint terminal() const override;
+    int openRestricted(const QString &fileName) override;
+    void closeRestricted(int fileDescriptor) override;
+    void switchTo(uint terminal) override;
+
+private Q_SLOTS:
+    void handleEnableSeat();
+    void handleDisableSeat();
+
+private:
+    explicit LibseatSession();
+
+    void initialize(struct libseat *seat, struct wl_event_source *eventSource);
+    void updateActive(bool active);
+
+    struct libseat *m_seat;
+    struct wl_event_source *m_eventSource;
+    QList<LibseatDevice> m_devices;
+    bool m_isActive = false;
+
+    friend class LibseatSessionPrivate;
+};
+
+} // namespace KWin
diff --git src/core/session_logind.cpp src/core/session_logind.cpp
index 6087e09fe..15f5ec503 100644
--- src/core/session_logind.cpp
+++ src/core/session_logind.cpp
@@ -108,7 +108,7 @@ static bool activate(const QString &sessionPath)
 
 std::unique_ptr<LogindSession> LogindSession::create()
 {
-    if (!QDBusConnection::systemBus().interface()->isServiceRegistered(s_serviceName)) {
+    if (!QDBusConnection::systemBus().interface() || !QDBusConnection::systemBus().interface()->isServiceRegistered(s_serviceName)) {
         return nullptr;
     }
 
diff --git src/core/session_noop.cpp src/core/session_noop.cpp
index 82d250059..b660e9ade 100644
--- src/core/session_noop.cpp
+++ src/core/session_noop.cpp
@@ -6,6 +6,11 @@
 
 #include "session_noop.h"
 
+#include "utils/common.h"
+#include <QFile>
+#include <fcntl.h>
+#include <unistd.h>
+
 namespace KWin
 {
 
@@ -40,11 +45,12 @@ uint NoopSession::terminal() const
 
 int NoopSession::openRestricted(const QString &fileName)
 {
-    return -1;
+    return open(QFile::encodeName(fileName).data(), O_RDWR | O_CLOEXEC);
 }
 
 void NoopSession::closeRestricted(int fileDescriptor)
 {
+    close(fileDescriptor);
 }
 
 void NoopSession::switchTo(uint terminal)
diff --git src/effects/startupfeedback/startupfeedback.cpp src/effects/startupfeedback/startupfeedback.cpp
index e2f1cbab8..e40f8cfc5 100644
--- src/effects/startupfeedback/startupfeedback.cpp
+++ src/effects/startupfeedback/startupfeedback.cpp
@@ -105,7 +105,8 @@ StartupFeedbackEffect::StartupFeedbackEffect()
     });
     reconfigure(ReconfigureAll);
 
-    m_splashVisible = QDBusConnection::sessionBus().interface()->isServiceRegistered(QStringLiteral("org.kde.KSplash"));
+    m_splashVisible =
+        QDBusConnection::sessionBus().interface() && QDBusConnection::sessionBus().interface()->isServiceRegistered(QStringLiteral("org.kde.KSplash"));
     auto serviceWatcher = new QDBusServiceWatcher(QStringLiteral("org.kde.KSplash"), QDBusConnection::sessionBus(), QDBusServiceWatcher::WatchForOwnerChange, this);
     connect(serviceWatcher, &QDBusServiceWatcher::serviceRegistered, this, [this] {
         m_splashVisible = true;
diff --git src/plugins/colord-integration/colordintegration.cpp src/plugins/colord-integration/colordintegration.cpp
index 2e1fe126a..835127276 100644
--- src/plugins/colord-integration/colordintegration.cpp
+++ src/plugins/colord-integration/colordintegration.cpp
@@ -28,7 +28,7 @@ ColordIntegration::ColordIntegration()
     connect(watcher, &QDBusServiceWatcher::serviceUnregistered, this, &ColordIntegration::teardown);
 
     QDBusConnectionInterface *interface = QDBusConnection::systemBus().interface();
-    if (interface->isServiceRegistered(QStringLiteral("org.freedesktop.ColorManager"))) {
+    if (interface && interface->isServiceRegistered(QStringLiteral("org.freedesktop.ColorManager"))) {
         initialize();
     }
 }
diff --git src/tabletmodemanager.cpp src/tabletmodemanager.cpp
index 78c9afa0b..6fa9fb1dd 100644
--- src/tabletmodemanager.cpp
+++ src/tabletmodemanager.cpp
@@ -19,6 +19,11 @@
 
 #include <QDBusConnection>
 
+#include "utils/common.h"
+#include <QFile>
+#include <fcntl.h>
+#include <unistd.h>
+
 namespace KWin
 {
 
diff --git src/wayland_server.cpp src/wayland_server.cpp
index 5e7921358..697ac59fa 100644
--- src/wayland_server.cpp
+++ src/wayland_server.cpp
@@ -85,6 +85,10 @@
 // system
 #include <sys/socket.h>
 #include <sys/types.h>
+#ifdef __FreeBSD__
+#include <sys/param.h>
+#include <sys/sysctl.h>
+#endif
 #include <unistd.h>
 
 // screenlocker
@@ -122,7 +126,18 @@ public:
     bool isTrustedOrigin(KWaylandServer::ClientConnection *client) const
     {
         const auto fullPathSha = sha256(client->executablePath());
-        const auto localSha = sha256(QLatin1String("/proc/") + QString::number(client->processId()) + QLatin1String("/exe"));
+#ifdef __FreeBSD__
+        const int mib[4] = {CTL_KERN, KERN_PROC, KERN_PROC_PATHNAME, static_cast<int>(client->processId())};
+        char buf[MAXPATHLEN];
+        size_t cb = sizeof(buf);
+        if (sysctl(mib, 4, buf, &cb, nullptr, 0) != 0) {
+            buf[0] = 0;
+        }
+        const auto localExe = QString::fromLocal8Bit(buf);
+#else
+        const auto localExe = QLatin1String("/proc/") + QString::number(client->processId()) + QLatin1String("/exe");
+#endif
+        const auto localSha = sha256(localExe);
         const bool trusted = !localSha.isEmpty() && fullPathSha == localSha;
 
         if (!trusted) {
